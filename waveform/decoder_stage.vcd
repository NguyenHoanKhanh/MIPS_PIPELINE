$date
	Mon Oct 20 23:30:00 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 1 ! ds_o_alu_src $end
$var wire 1 " ds_o_ce $end
$var wire 32 # ds_o_data_rs [31:0] $end
$var wire 32 $ ds_o_data_rt [31:0] $end
$var wire 6 % ds_o_funct [5:0] $end
$var wire 16 & ds_o_imm [15:0] $end
$var wire 1 ' ds_o_jump $end
$var wire 26 ( ds_o_jump_addr [25:0] $end
$var wire 1 ) ds_o_memtoreg $end
$var wire 1 * ds_o_memwrite $end
$var wire 6 + ds_o_opcode [5:0] $end
$var wire 1 , ds_o_reg_wr $end
$var reg 1 - ds_clk $end
$var reg 1 . ds_i_ce $end
$var reg 32 / ds_i_data_rd [31:0] $end
$var reg 32 0 ds_i_instr [31:0] $end
$var reg 1 1 ds_rst $end
$scope module ds $end
$var wire 1 2 ds_clk $end
$var wire 5 3 ds_i_addr_rd [4:0] $end
$var wire 1 4 ds_i_ce $end
$var wire 32 5 ds_i_data_rd [31:0] $end
$var wire 32 6 ds_i_instr [31:0] $end
$var wire 1 7 ds_i_reg_wr $end
$var wire 5 8 ds_o_addr_rd [4:0] $end
$var wire 5 9 ds_o_addr_rs [4:0] $end
$var wire 5 : ds_o_addr_rt [4:0] $end
$var wire 1 ! ds_o_alu_src $end
$var wire 1 " ds_o_ce $end
$var wire 32 ; ds_o_data_rs [31:0] $end
$var wire 32 < ds_o_data_rt [31:0] $end
$var wire 6 = ds_o_funct [5:0] $end
$var wire 16 > ds_o_imm [15:0] $end
$var wire 1 ' ds_o_jump $end
$var wire 26 ? ds_o_jump_addr [25:0] $end
$var wire 1 ) ds_o_memtoreg $end
$var wire 1 * ds_o_memwrite $end
$var wire 6 @ ds_o_opcode [5:0] $end
$var wire 1 , ds_o_reg_wr $end
$var wire 1 A ds_rst $end
$scope module d $end
$var wire 1 4 d_i_ce $end
$var wire 32 B d_i_instr [31:0] $end
$var wire 6 C d_i_opcode [5:0] $end
$var wire 6 D funct [5:0] $end
$var wire 16 E imm [15:0] $end
$var wire 26 F jump_address [25:0] $end
$var wire 1 G op_addi $end
$var wire 1 H op_addiu $end
$var wire 1 I op_andi $end
$var wire 1 J op_beq $end
$var wire 1 K op_bne $end
$var wire 1 L op_jal $end
$var wire 1 M op_load $end
$var wire 1 N op_ori $end
$var wire 1 O op_rtype $end
$var wire 1 P op_slti $end
$var wire 1 Q op_sltiu $end
$var wire 1 R op_store $end
$var wire 6 S opcode [5:0] $end
$var wire 5 T rd [4:0] $end
$var wire 5 U rs [4:0] $end
$var wire 5 V rt [4:0] $end
$var reg 5 W d_o_addr_rd [4:0] $end
$var reg 5 X d_o_addr_rs [4:0] $end
$var reg 5 Y d_o_addr_rt [4:0] $end
$var reg 1 Z d_o_alu_src $end
$var reg 1 [ d_o_ce $end
$var reg 6 \ d_o_funct [5:0] $end
$var reg 16 ] d_o_imm [15:0] $end
$var reg 1 ^ d_o_jump $end
$var reg 26 _ d_o_jump_addr [25:0] $end
$var reg 1 ` d_o_memtoreg $end
$var reg 1 a d_o_memwrite $end
$var reg 6 b d_o_opcode [5:0] $end
$var reg 1 c d_o_reg_wr $end
$upscope $end
$scope module r $end
$var wire 5 d r_addr_in [4:0] $end
$var wire 5 e r_addr_out1 [4:0] $end
$var wire 5 f r_addr_out2 [4:0] $end
$var wire 1 2 r_clk $end
$var wire 32 g r_data_in [31:0] $end
$var wire 32 h r_data_out1 [31:0] $end
$var wire 32 i r_data_out2 [31:0] $end
$var wire 1 A r_rst $end
$var wire 1 7 r_wr_en $end
$var integer 32 j i [31:0] $end
$upscope $end
$upscope $end
$scope task reset $end
$var integer 32 k counter [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10 k
b100000 j
b0 i
b0 h
bx g
b0 f
b0 e
bz d
0c
b0 b
0a
0`
b0 _
0^
b0 ]
b0 \
0[
0Z
b0 Y
b0 X
b0 W
bx V
bx U
bx T
bx S
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
bx F
bx E
bx D
bx C
bx B
0A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
z7
bx 6
bx 5
04
bz 3
02
01
bx 0
bx /
0.
0-
0,
b0 +
0*
0)
b0 (
0'
b0 &
b0 %
b0 $
b0 #
0"
0!
$end
#5
1-
12
#10
b100000 j
0-
02
#15
1.
14
11
1A
1-
12
#20
0-
02
#25
1c
1,
1[
1"
b100000 \
b100000 %
b100000 =
b1 W
b1 8
b11 Y
b11 $
b11 <
b11 i
b11 :
b11 f
b10 X
b10 #
b10 ;
b10 h
b10 9
b10 e
1O
0M
0R
0J
0K
0G
0H
0P
0Q
0I
0N
0L
b0 C
b10 U
b11 V
b1 T
b0 S
b100000 D
b100000100000 E
b10000110000100000100000 F
b10000110000100000100000 0
b10000110000100000100000 6
b10000110000100000100000 B
1-
12
#30
0-
02
#35
1^
1'
b10000000000000000000000 _
b10000000000000000000000 (
b10000000000000000000000 ?
b11 b
b11 +
b11 @
1c
1,
1[
1"
b0 \
b0 %
b0 =
b0 W
b0 8
b0 Y
b0 $
b0 <
b0 i
b0 :
b0 f
b0 X
b0 #
b0 ;
b0 h
b0 9
b0 e
0O
1L
b11 C
b0 V
b0 T
b11 S
b0 D
b0 E
b10000000000000000000000 F
b1100010000000000000000000000 0
b1100010000000000000000000000 6
b1100010000000000000000000000 B
1-
12
#40
0-
02
#45
1-
12
#50
0-
02
#55
1-
12
