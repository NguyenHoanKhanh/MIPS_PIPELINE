$date
	Mon Oct 27 00:14:36 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 32 ! im_ds_o_pc [31:0] $end
$var wire 32 " write_back_data [31:0] $end
$var reg 1 # d_clk $end
$var reg 1 $ d_i_ce $end
$var reg 1 % d_rst $end
$scope module d $end
$var wire 1 & a_o_change_pc $end
$var wire 32 ' a_o_pc [31:0] $end
$var wire 1 ( d_clk $end
$var wire 1 ) d_i_ce $end
$var wire 1 * d_rst $end
$var wire 5 + ds_o_addr_rd [4:0] $end
$var wire 5 , ds_o_addr_rs [4:0] $end
$var wire 5 - ds_o_addr_rt [4:0] $end
$var wire 1 . ds_o_alu_src $end
$var wire 1 / ds_o_branch $end
$var wire 1 0 ds_o_ce $end
$var wire 32 1 ds_o_data_rs [31:0] $end
$var wire 32 2 ds_o_data_rt [31:0] $end
$var wire 6 3 ds_o_funct [5:0] $end
$var wire 16 4 ds_o_imm [15:0] $end
$var wire 1 5 ds_o_jal $end
$var wire 26 6 ds_o_jal_addr [25:0] $end
$var wire 1 7 ds_o_jr $end
$var wire 1 8 ds_o_memtoreg $end
$var wire 1 9 ds_o_memwrite $end
$var wire 6 : ds_o_opcode [5:0] $end
$var wire 1 ; ds_o_reg_dst $end
$var wire 1 < ds_o_reg_wr $end
$var wire 32 = es_o_alu_pc [31:0] $end
$var wire 32 > es_o_alu_value [31:0] $end
$var wire 1 ? es_o_ce $end
$var wire 1 @ es_o_change_pc $end
$var wire 6 A es_o_opcode [5:0] $end
$var wire 1 B f_o_stall $end
$var wire 2 C forward_rs1 [1:0] $end
$var wire 2 D forward_rs2 [1:0] $end
$var wire 1 E im_o_ce $end
$var wire 32 F im_o_instr [31:0] $end
$var wire 32 G ms_o_load_data [31:0] $end
$var wire 5 H mx_es_o_addr_rd [4:0] $end
$var wire 32 I mx_es_o_data_rs1 [31:0] $end
$var wire 32 J mx_es_o_data_rs2 [31:0] $end
$var wire 1 K pc_o_ce $end
$var wire 32 L pc_o_pc [31:0] $end
$var wire 32 M tl_o_load_data [31:0] $end
$var wire 32 N ts_o_store_data [31:0] $end
$var wire 4 O ts_o_store_mask [3:0] $end
$var wire 32 P write_back_data [31:0] $end
$var reg 5 Q ds_es_o_addr_rt [4:0] $end
$var reg 1 R ds_es_o_alu_src $end
$var reg 1 S ds_es_o_branch $end
$var reg 1 T ds_es_o_ce $end
$var reg 6 U ds_es_o_funct [5:0] $end
$var reg 16 V ds_es_o_imm [15:0] $end
$var reg 1 W ds_es_o_jal $end
$var reg 26 X ds_es_o_jal_addr [25:0] $end
$var reg 1 Y ds_es_o_jr $end
$var reg 1 Z ds_es_o_memtoreg $end
$var reg 1 [ ds_es_o_memwrite $end
$var reg 6 \ ds_es_o_opcode [5:0] $end
$var reg 32 ] ds_es_o_pc [31:0] $end
$var reg 1 ^ ds_es_o_reg_wr $end
$var reg 5 _ ds_f_o_addr_rs [4:0] $end
$var reg 5 ` ds_mx_o_addr_rd [4:0] $end
$var reg 32 a ds_mx_o_data_rs [31:0] $end
$var reg 32 b ds_mx_o_data_rt [31:0] $end
$var reg 1 c ds_mx_o_reg_dst $end
$var reg 32 d es_a_o_alu_pc [31:0] $end
$var reg 1 e es_a_o_change_pc $end
$var reg 32 f es_ms_alu_value [31:0] $end
$var reg 5 g es_ms_o_addr_rd [4:0] $end
$var reg 1 h es_ms_o_ce $end
$var reg 32 i es_ms_o_data_rt [31:0] $end
$var reg 1 j es_ms_o_memtoreg $end
$var reg 1 k es_ms_o_memwrite $end
$var reg 6 l es_ms_o_opcode [5:0] $end
$var reg 1 m es_ms_o_regwr $end
$var reg 1 n im_ds_o_ce $end
$var reg 32 o im_ds_o_instr [31:0] $end
$var reg 32 p im_ds_o_pc [31:0] $end
$var reg 5 q ms_wb_o_addr_rd [4:0] $end
$var reg 32 r ms_wb_o_alu_value [31:0] $end
$var reg 32 s ms_wb_o_load_data [31:0] $end
$var reg 1 t ms_wb_o_memtoreg $end
$var reg 1 u ms_wb_o_regwr $end
$var reg 1 v pc_im_o_ce $end
$var reg 32 w pc_im_o_pc [31:0] $end
$var reg 4 x ts_ms_o_store_mask [3:0] $end
$scope module p_c $end
$var wire 1 ( pc_clk $end
$var wire 1 ) pc_i_ce $end
$var wire 1 & pc_i_change_pc $end
$var wire 32 y pc_i_pc [31:0] $end
$var wire 1 * pc_rst $end
$var reg 1 z pc_o_ce $end
$var reg 32 { pc_o_pc [31:0] $end
$var reg 32 | temp_pc [31:0] $end
$upscope $end
$scope module i_m $end
$var wire 1 ( im_clk $end
$var wire 32 } im_i_address [31:0] $end
$var wire 1 ~ im_i_ce $end
$var wire 1 * im_rst $end
$var reg 1 !" im_o_ce $end
$var reg 32 "" im_o_instr [31:0] $end
$upscope $end
$scope module ds $end
$var wire 1 ( ds_clk $end
$var wire 5 #" ds_i_addr_rd [4:0] $end
$var wire 1 $" ds_i_ce $end
$var wire 32 %" ds_i_data_rd [31:0] $end
$var wire 32 &" ds_i_instr [31:0] $end
$var wire 1 '" ds_i_reg_wr $end
$var wire 5 (" ds_o_addr_rd [4:0] $end
$var wire 5 )" ds_o_addr_rs [4:0] $end
$var wire 5 *" ds_o_addr_rt [4:0] $end
$var wire 1 . ds_o_alu_src $end
$var wire 32 +" ds_o_alu_value [31:0] $end
$var wire 1 / ds_o_branch $end
$var wire 1 0 ds_o_ce $end
$var wire 32 ," ds_o_data_rs [31:0] $end
$var wire 32 -" ds_o_data_rt [31:0] $end
$var wire 6 ." ds_o_funct [5:0] $end
$var wire 16 /" ds_o_imm [15:0] $end
$var wire 1 5 ds_o_jal $end
$var wire 26 0" ds_o_jal_addr [25:0] $end
$var wire 1 7 ds_o_jr $end
$var wire 1 8 ds_o_memtoreg $end
$var wire 1 9 ds_o_memwrite $end
$var wire 6 1" ds_o_opcode [5:0] $end
$var wire 1 ; ds_o_reg_dst $end
$var wire 1 < ds_o_reg_wr $end
$var wire 1 * ds_rst $end
$scope module d $end
$var wire 1 $" d_i_ce $end
$var wire 6 2" d_i_funct [5:0] $end
$var wire 32 3" d_i_instr [31:0] $end
$var wire 6 4" d_i_opcode [5:0] $end
$var wire 6 5" funct [5:0] $end
$var wire 1 6" funct_jr $end
$var wire 16 7" imm [15:0] $end
$var wire 1 8" op_addi $end
$var wire 1 9" op_addiu $end
$var wire 1 :" op_andi $end
$var wire 1 ;" op_beq $end
$var wire 1 <" op_bne $end
$var wire 1 =" op_jal $end
$var wire 1 >" op_load $end
$var wire 1 ?" op_ori $end
$var wire 1 @" op_rtype $end
$var wire 1 A" op_slti $end
$var wire 1 B" op_sltiu $end
$var wire 1 C" op_store $end
$var wire 6 D" opcode [5:0] $end
$var wire 5 E" rd [4:0] $end
$var wire 5 F" rs [4:0] $end
$var wire 5 G" rt [4:0] $end
$var wire 26 H" temp_jal [25:0] $end
$var reg 5 I" d_o_addr_rd [4:0] $end
$var reg 5 J" d_o_addr_rs [4:0] $end
$var reg 5 K" d_o_addr_rt [4:0] $end
$var reg 1 L" d_o_alu_src $end
$var reg 1 M" d_o_branch $end
$var reg 1 N" d_o_ce $end
$var reg 6 O" d_o_funct [5:0] $end
$var reg 16 P" d_o_imm [15:0] $end
$var reg 1 Q" d_o_jal $end
$var reg 26 R" d_o_jal_addr [25:0] $end
$var reg 1 S" d_o_jr $end
$var reg 1 T" d_o_memtoreg $end
$var reg 1 U" d_o_memwrite $end
$var reg 6 V" d_o_opcode [5:0] $end
$var reg 1 W" d_o_reg_dst $end
$var reg 1 X" d_o_reg_wr $end
$upscope $end
$scope module r $end
$var wire 5 Y" r_addr_in [4:0] $end
$var wire 5 Z" r_addr_out1 [4:0] $end
$var wire 5 [" r_addr_out2 [4:0] $end
$var wire 1 ( r_clk $end
$var wire 32 \" r_data_in [31:0] $end
$var wire 32 ]" r_data_out1 [31:0] $end
$var wire 32 ^" r_data_out2 [31:0] $end
$var wire 1 * r_rst $end
$var wire 1 '" r_wr_en $end
$var integer 32 _" i [31:0] $end
$upscope $end
$upscope $end
$scope module a $end
$var wire 1 / i_branch $end
$var wire 32 `" i_data_r1 [31:0] $end
$var wire 32 a" i_data_r2 [31:0] $end
$var wire 1 b" i_es_o_change_pc $end
$var wire 32 c" i_es_o_pc [31:0] $end
$var wire 16 d" i_imm [15:0] $end
$var wire 6 e" i_opcode [5:0] $end
$var wire 32 f" i_pc [31:0] $end
$var wire 32 g" o_imm [31:0] $end
$var reg 1 h" o_compare $end
$var reg 32 i" o_pc [31:0] $end
$upscope $end
$scope module m1 $end
$var wire 32 j" a [31:0] $end
$var wire 32 k" b [31:0] $end
$var wire 32 l" c [31:0] $end
$var wire 32 m" data_out [31:0] $end
$var wire 2 n" sel [1:0] $end
$upscope $end
$scope module m2 $end
$var wire 32 o" a [31:0] $end
$var wire 32 p" b [31:0] $end
$var wire 32 q" c [31:0] $end
$var wire 32 r" data_out [31:0] $end
$var wire 2 s" sel [1:0] $end
$upscope $end
$scope module m3 $end
$var wire 5 t" a [4:0] $end
$var wire 5 u" b [4:0] $end
$var wire 5 v" out [4:0] $end
$var wire 1 w" regdst $end
$upscope $end
$scope module es $end
$var wire 5 x" alu_control [4:0] $end
$var wire 32 y" alu_pc [31:0] $end
$var wire 32 z" alu_value [31:0] $end
$var wire 1 {" change_pc $end
$var wire 6 |" es_i_alu_funct [5:0] $end
$var wire 6 }" es_i_alu_op [5:0] $end
$var wire 1 ~" es_i_alu_src $end
$var wire 1 !# es_i_ce $end
$var wire 32 "# es_i_data_rs [31:0] $end
$var wire 32 ## es_i_data_rt [31:0] $end
$var wire 16 $# es_i_imm [15:0] $end
$var wire 1 %# es_i_jal $end
$var wire 26 &# es_i_jal_addr [25:0] $end
$var wire 1 '# es_i_jr $end
$var wire 32 (# es_i_pc [31:0] $end
$var wire 32 )# es_o_alu_pc [31:0] $end
$var wire 1 @ es_o_change_pc $end
$var wire 1 *# take_jal $end
$var wire 1 +# take_jr $end
$var wire 32 ,# temp_alu_value [31:0] $end
$var wire 1 -# temp_jal_change_pc $end
$var wire 32 .# temp_pc [31:0] $end
$var wire 32 /# temp_ra [31:0] $end
$var reg 32 0# es_o_alu_value [31:0] $end
$var reg 1 1# es_o_ce $end
$var reg 6 2# es_o_opcode [5:0] $end
$scope module ac $end
$var wire 6 3# ac_i_funct [5:0] $end
$var wire 6 4# ac_i_opcode [5:0] $end
$var reg 5 5# ac_o_control [4:0] $end
$upscope $end
$scope module a $end
$var wire 1 ~" a_i_alu_src $end
$var wire 32 6# a_i_data_rs [31:0] $end
$var wire 32 7# a_i_data_rt [31:0] $end
$var wire 5 8# a_i_funct [4:0] $end
$var wire 16 9# a_i_imm [15:0] $end
$var wire 32 :# a_i_pc [31:0] $end
$var wire 32 ;# a_imm [31:0] $end
$var wire 32 <# a_o_data_2 [31:0] $end
$var wire 1 =# funct_add $end
$var wire 1 ># funct_addu $end
$var wire 1 ?# funct_and $end
$var wire 1 @# funct_eq $end
$var wire 1 A# funct_ge $end
$var wire 1 B# funct_geu $end
$var wire 1 C# funct_jr $end
$var wire 1 D# funct_lui $end
$var wire 1 E# funct_neq $end
$var wire 1 F# funct_nor $end
$var wire 1 G# funct_or $end
$var wire 1 H# funct_sll $end
$var wire 1 I# funct_slt $end
$var wire 1 J# funct_sltu $end
$var wire 1 K# funct_sra $end
$var wire 1 L# funct_srl $end
$var wire 1 M# funct_sub $end
$var wire 1 N# funct_subu $end
$var reg 1 O# a_o_change_pc $end
$var reg 32 P# alu_pc [31:0] $end
$var reg 32 Q# alu_value [31:0] $end
$upscope $end
$scope module tj $end
$var wire 32 R# temp_jumpaddr [31:0] $end
$var wire 1 %# tj_i_jal $end
$var wire 26 S# tj_i_jal_addr [25:0] $end
$var wire 32 T# tj_i_pc [31:0] $end
$var reg 1 U# tj_o_change_pc $end
$var reg 32 V# tj_o_pc [31:0] $end
$var reg 32 W# tj_o_ra [31:0] $end
$upscope $end
$upscope $end
$scope module ts $end
$var wire 6 X# ts_i_opcode [5:0] $end
$var wire 32 Y# ts_i_store_data [31:0] $end
$var reg 32 Z# ts_o_store_data [31:0] $end
$var reg 4 [# ts_o_store_mask [3:0] $end
$upscope $end
$scope module m $end
$var wire 32 \# alu_value_addr [31:0] $end
$var wire 1 ( m_clk $end
$var wire 1 ]# m_i_ce $end
$var wire 4 ^# m_i_mask [3:0] $end
$var wire 32 _# m_i_store_data [31:0] $end
$var wire 32 `# m_o_load_data [31:0] $end
$var wire 1 * m_rst $end
$var wire 1 a# m_wr_en $end
$var integer 32 b# i [31:0] $end
$upscope $end
$scope module tl $end
$var wire 32 c# tl_i_load_data [31:0] $end
$var wire 6 d# tl_i_opcode [5:0] $end
$var reg 32 e# tl_o_load_data [31:0] $end
$upscope $end
$scope module f $end
$var wire 5 f# ds_es_i_addr_rs1 [4:0] $end
$var wire 5 g# ds_es_i_addr_rs2 [4:0] $end
$var wire 6 h# ds_es_i_opcode [5:0] $end
$var wire 1 i# ds_es_op_load $end
$var wire 5 j# es_ms_i_addr_rd [4:0] $end
$var wire 1 k# es_ms_i_regwrite $end
$var wire 5 l# ms_wb_i_addr_rd [4:0] $end
$var wire 1 '" ms_wb_i_regwrite $end
$var reg 2 m# f_o_control_rs1 [1:0] $end
$var reg 2 n# f_o_control_rs2 [1:0] $end
$var reg 1 o# f_o_stall $end
$upscope $end
$upscope $end
$scope task reset $end
$var integer 32 p# counter [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10 p#
0o#
b0 n#
b0 m#
b0 l#
0k#
b0 j#
0i#
b0 h#
b0 g#
b0 f#
b0 e#
b0 d#
b0 c#
b100000 b#
0a#
b0 `#
b0 _#
b0 ^#
0]#
b0 \#
b0 [#
b0 Z#
b0 Y#
b0 X#
b0 W#
b0 V#
0U#
b0 T#
b0 S#
b0 R#
b0 Q#
b0 P#
0O#
0N#
0M#
0L#
0K#
0J#
0I#
1H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
b0 <#
b0 ;#
b0 :#
b0 9#
b111 8#
b0 7#
b0 6#
b111 5#
b0 4#
b0 3#
b0 2#
01#
b0 0#
b0 /#
b0 .#
0-#
b0 ,#
0+#
0*#
b0 )#
b0 (#
0'#
b0 &#
0%#
b0 $#
b0 ##
b0 "#
0!#
0~"
b0 }"
b0 |"
0{"
b0 z"
b0 y"
b111 x"
0w"
b0 v"
b0 u"
b0 t"
b0 s"
b0 r"
b0 q"
b0 p"
b0 o"
b0 n"
b0 m"
b0 l"
b0 k"
b0 j"
b0 i"
0h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
0b"
b0 a"
b0 `"
b100000 _"
b0 ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
0X"
0W"
b0 V"
0U"
0T"
0S"
b0 R"
0Q"
b0 P"
b0 O"
0N"
0M"
0L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
0C"
0B"
0A"
1@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
b0 7"
06"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
bz +"
b0 *"
b0 )"
b0 ("
0'"
b0 &"
b0 %"
0$"
b0 #"
b0 ""
0!"
0~
b0 }
b0 |
b0 {
0z
b0 y
b0 x
b0 w
0v
0u
0t
b0 s
b0 r
b0 q
b0 p
b0 o
0n
0m
b0 l
0k
0j
b0 i
0h
b0 g
b0 f
0e
b0 d
0c
b0 b
b0 a
b0 `
b0 _
0^
b0 ]
b0 \
0[
0Z
0Y
b0 X
0W
b0 V
b0 U
0T
0S
0R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
0K
b0 J
b0 I
b0 H
b0 G
b0 F
0E
b0 D
b0 C
0B
b0 A
0@
0?
b0 >
b0 =
0<
0;
b0 :
09
08
07
b0 6
05
b0 4
b0 3
b0 2
b0 1
00
0/
0.
b0 -
b0 ,
b0 +
0*
x)
0(
b0 '
0&
0%
x$
0#
b0 "
b0 !
$end
#5
1#
1(
#10
b100000 b#
b100000 _"
0#
0(
#15
1%
1*
1#
1(
#20
0#
0(
#25
b100 |
1z
1K
1$
1)
1#
1(
#30
0#
0(
#35
b1000 |
b100 {
b100 L
1v
1~
1#
1(
#40
1!"
1E
b10000001000010000000001000000 ""
b10000001000010000000001000000 F
0#
0(
#45
1h"
1&
b1000000 i"
b1000000 '
b1000000 y
1M"
1/
b1000000 P"
b1000000 g"
b1000000 4
b1000000 /"
b1000000 d"
b100 V"
b100 :
b100 1"
b100 e"
b1 K"
b1 2
b1 -"
b1 ^"
b1 a"
b1 -
b1 *"
b1 ["
b1 J"
b1 1
b1 ,"
b1 ]"
b1 `"
b1 ,
b1 )"
b1 Z"
1;"
0@"
b100 4"
b1 F"
b1 G"
b1000000 7"
b100 D"
b1000010000000001000000 H"
0W"
0;
0X"
0<
1N"
10
b10000001000010000000001000000 o
b10000001000010000000001000000 &"
b10000001000010000000001000000 3"
1n
1$"
b100 w
b100 }
b1100 |
b1000 {
b1000 L
1#
1(
#50
bx ""
bx F
0#
0(
#55
b10 0#
b10 >
b10 ,#
b0 V"
b0 :
b0 1"
b0 e"
b0 K"
b0 2
b0 -"
b0 ^"
b0 a"
b0 -
b0 *"
b0 ["
b0 J"
b0 1
b0 ,"
b0 ]"
b0 `"
b0 ,
b0 )"
b0 Z"
b0 P"
b0 g"
b0 4
b0 /"
b0 d"
0M"
0/
0N"
00
b1 <#
b10 Q#
b10 z"
x6"
bx 2"
x;"
x<"
x?"
x="
x:"
x8"
x>"
xA"
x@"
xC"
x9"
xB"
bx 4"
bx F"
bx G"
bx E"
bx 7"
bx 5"
bx D"
bx H"
b0 i"
b0 '
b0 y
0h"
0&
b1 H
b1 v"
b1 I
b1 m"
b1 "#
b1 6#
b1 J
b1 r"
b1 ##
b1 7#
b1 Y#
b0 5#
1=#
0H#
b0 x"
b0 8#
b100 2#
b100 A
11#
1?
b1000000 |
b1100 {
b1100 L
b1000 w
b1000 }
bx o
bx &"
bx 3"
b100 p
b100 !
b100 f"
b1 Q
b1 t"
b1 g#
b1 a
b1 j"
b1 b
b1 o"
b1 _
b1 f#
b100 \
b100 }"
b100 4#
b100 X#
b100 h#
b1000000 V
b1000000 $#
b1000000 9#
b1000000 ;#
1T
1!#
1#
1(
#60
0#
0(
#65
b0 ,#
b0 <#
b0 H
b0 v"
b0 I
b0 m"
b0 "#
b0 6#
b0 J
b0 r"
b0 ##
b0 7#
b0 Y#
b111 5#
0=#
1H#
b111 x"
b111 8#
b0 Q#
b0 z"
b0 2#
b0 A
01#
0?
b0 0#
b0 >
b1 g
b1 j#
b10 f
b10 k"
b10 p"
b10 \#
b10 G
b10 `#
b10 c#
b100 l
b100 d#
1h
1]#
b0 Q
b0 t"
b0 g#
b0 a
b0 j"
b0 b
b0 o"
b0 _
b0 f#
b0 \
b0 }"
b0 4#
b0 X#
b0 h#
b100 ]
b100 (#
b100 :#
b100 T#
b0 V
b0 $#
b0 9#
b0 ;#
0T
0!#
b1000 p
b1000 !
b1000 f"
b1100 w
b1100 }
b1000100 |
b1000000 {
b1000000 L
1#
1(
#70
0#
0(
#75
b10 "
b10 P
b10 %"
b10 \"
b10 l"
b10 q"
b1001000 |
b1000100 {
b1000100 L
b1000000 w
b1000000 }
b1100 p
b1100 !
b1100 f"
b1000 ]
b1000 (#
b1000 :#
b1000 T#
b0 g
b0 j#
b0 f
b0 k"
b0 p"
b0 \#
b0 G
b0 `#
b0 c#
b0 l
b0 d#
0h
0]#
b1 q
b1 #"
b1 Y"
b1 l#
b10 r
b10 s
1#
1(
#80
0#
0(
#85
b0 "
b0 P
b0 %"
b0 \"
b0 l"
b0 q"
b0 q
b0 #"
b0 Y"
b0 l#
b0 r
b0 s
b1100 ]
b1100 (#
b1100 :#
b1100 T#
b1000000 p
b1000000 !
b1000000 f"
b1000100 w
b1000100 }
b1001100 |
b1001000 {
b1001000 L
1#
1(
#90
0#
0(
#95
b1010000 |
b1001100 {
b1001100 L
b1001000 w
b1001000 }
b1000100 p
b1000100 !
b1000100 f"
b1000000 ]
b1000000 (#
b1000000 :#
b1000000 T#
1#
1(
#100
0#
0(
#105
b1000100 ]
b1000100 (#
b1000100 :#
b1000100 T#
b1001000 p
b1001000 !
b1001000 f"
b1001100 w
b1001100 }
b1010100 |
b1010000 {
b1010000 L
1#
1(
#110
0#
0(
#115
b1011000 |
b1010100 {
b1010100 L
b1010000 w
b1010000 }
b1001100 p
b1001100 !
b1001100 f"
b1001000 ]
b1001000 (#
b1001000 :#
b1001000 T#
1#
1(
#120
0#
0(
#125
b1001100 ]
b1001100 (#
b1001100 :#
b1001100 T#
b1010000 p
b1010000 !
b1010000 f"
b1010100 w
b1010100 }
b1011100 |
b1011000 {
b1011000 L
1#
1(
#130
0#
0(
#135
b1100000 |
b1011100 {
b1011100 L
b1011000 w
b1011000 }
b1010100 p
b1010100 !
b1010100 f"
b1010000 ]
b1010000 (#
b1010000 :#
b1010000 T#
1#
1(
#140
0#
0(
#145
b1010100 ]
b1010100 (#
b1010100 :#
b1010100 T#
b1011000 p
b1011000 !
b1011000 f"
b1011100 w
b1011100 }
b1100100 |
b1100000 {
b1100000 L
1#
1(
#150
0#
0(
#155
b1101000 |
b1100100 {
b1100100 L
b1100000 w
b1100000 }
b1011100 p
b1011100 !
b1011100 f"
b1011000 ]
b1011000 (#
b1011000 :#
b1011000 T#
1#
1(
#160
0#
0(
#165
b1011100 ]
b1011100 (#
b1011100 :#
b1011100 T#
b1100000 p
b1100000 !
b1100000 f"
b1100100 w
b1100100 }
b1101100 |
b1101000 {
b1101000 L
1#
1(
#170
0#
0(
#175
b1110000 |
b1101100 {
b1101100 L
b1101000 w
b1101000 }
b1100100 p
b1100100 !
b1100100 f"
b1100000 ]
b1100000 (#
b1100000 :#
b1100000 T#
1#
1(
#180
0#
0(
#185
b1100100 ]
b1100100 (#
b1100100 :#
b1100100 T#
b1101000 p
b1101000 !
b1101000 f"
b1101100 w
b1101100 }
b1110100 |
b1110000 {
b1110000 L
1#
1(
#190
0#
0(
#195
b1111000 |
b1110100 {
b1110100 L
b1110000 w
b1110000 }
b1101100 p
b1101100 !
b1101100 f"
b1101000 ]
b1101000 (#
b1101000 :#
b1101000 T#
1#
1(
#200
0#
0(
#205
b1101100 ]
b1101100 (#
b1101100 :#
b1101100 T#
b1110000 p
b1110000 !
b1110000 f"
b1110100 w
b1110100 }
b1111100 |
b1111000 {
b1111000 L
1#
1(
#210
0#
0(
#215
b10000000 |
b1111100 {
b1111100 L
b1111000 w
b1111000 }
b1110100 p
b1110100 !
b1110100 f"
b1110000 ]
b1110000 (#
b1110000 :#
b1110000 T#
1#
1(
#220
0#
0(
#225
b1110100 ]
b1110100 (#
b1110100 :#
b1110100 T#
b1111000 p
b1111000 !
b1111000 f"
b1111100 w
b1111100 }
b10000100 |
b10000000 {
b10000000 L
1#
1(
#230
0#
0(
#235
b10001000 |
b10000100 {
b10000100 L
b10000000 w
b10000000 }
b1111100 p
b1111100 !
b1111100 f"
b1111000 ]
b1111000 (#
b1111000 :#
b1111000 T#
1#
1(
#240
0#
0(
#245
b1111100 ]
b1111100 (#
b1111100 :#
b1111100 T#
b10000000 p
b10000000 !
b10000000 f"
b10000100 w
b10000100 }
b10001100 |
b10001000 {
b10001000 L
1#
1(
#250
0#
0(
#255
b10010000 |
b10001100 {
b10001100 L
b10001000 w
b10001000 }
b10000100 p
b10000100 !
b10000100 f"
b10000000 ]
b10000000 (#
b10000000 :#
b10000000 T#
1#
1(
#260
0#
0(
#265
b10000100 ]
b10000100 (#
b10000100 :#
b10000100 T#
b10001000 p
b10001000 !
b10001000 f"
b10001100 w
b10001100 }
b10010100 |
b10010000 {
b10010000 L
1#
1(
