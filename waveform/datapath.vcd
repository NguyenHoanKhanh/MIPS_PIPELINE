$date
	Mon Oct 13 02:19:49 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 32 ! fs_ds_o_pc [31:0] $end
$var wire 32 " write_back_data [31:0] $end
$var reg 1 # d_clk $end
$var reg 1 $ d_i_ce $end
$var reg 1 % d_rst $end
$scope module d $end
$var wire 1 & d_clk $end
$var wire 1 ' d_i_ce $end
$var wire 1 ( d_rst $end
$var wire 1 ) ds_o_alu_src $end
$var wire 1 * ds_o_branch $end
$var wire 1 + ds_o_ce $end
$var wire 32 , ds_o_data_rs [31:0] $end
$var wire 32 - ds_o_data_rt [31:0] $end
$var wire 6 . ds_o_funct [5:0] $end
$var wire 16 / ds_o_imm [15:0] $end
$var wire 1 0 ds_o_memread $end
$var wire 1 1 ds_o_memtoreg $end
$var wire 1 2 ds_o_memwrite $end
$var wire 6 3 ds_o_opcode [5:0] $end
$var wire 32 4 es_o_alu_pc [31:0] $end
$var wire 32 5 es_o_alu_value [31:0] $end
$var wire 1 6 es_o_ce $end
$var wire 1 7 es_o_change_pc $end
$var wire 6 8 es_o_funct [5:0] $end
$var wire 6 9 es_o_opcode [5:0] $end
$var wire 1 : es_o_zero $end
$var wire 1 ; im_o_ce $end
$var wire 32 < im_o_instr [31:0] $end
$var wire 32 = ms_o_load_data [31:0] $end
$var wire 32 > pc_im_o_pc [31:0] $end
$var wire 1 ? pc_is_o_ce $end
$var wire 32 @ write_back_data [31:0] $end
$var reg 1 A ds_es_o_alu_src $end
$var reg 1 B ds_es_o_branch $end
$var reg 1 C ds_es_o_ce $end
$var reg 32 D ds_es_o_data_rs [31:0] $end
$var reg 32 E ds_es_o_data_rt [31:0] $end
$var reg 6 F ds_es_o_funct [5:0] $end
$var reg 16 G ds_es_o_imm [15:0] $end
$var reg 1 H ds_es_o_memread $end
$var reg 1 I ds_es_o_memtoreg $end
$var reg 1 J ds_es_o_memwrite $end
$var reg 6 K ds_es_o_opcode [5:0] $end
$var reg 32 L ds_es_o_pc [31:0] $end
$var reg 32 M es_ms_alu_value [31:0] $end
$var reg 1 N es_ms_o_ce $end
$var reg 32 O es_ms_o_data_rt [31:0] $end
$var reg 6 P es_ms_o_funct [5:0] $end
$var reg 1 Q es_ms_o_memread $end
$var reg 1 R es_ms_o_memtoreg $end
$var reg 1 S es_ms_o_memwrite $end
$var reg 6 T es_ms_o_opcode [5:0] $end
$var reg 1 U es_ms_o_zero $end
$var reg 32 V es_pc_o_alu_pc [31:0] $end
$var reg 1 W es_pc_o_change_pc $end
$var reg 32 X fs_ds_o_pc [31:0] $end
$var reg 1 Y im_ds_o_ce $end
$var reg 32 Z im_ds_o_instr [31:0] $end
$var reg 32 [ ms_wb_o_alu_value [31:0] $end
$var reg 32 \ ms_wb_o_load_data [31:0] $end
$var reg 1 ] ms_wb_o_memtoreg $end
$scope module p_c $end
$var wire 1 & pc_clk $end
$var wire 1 ' pc_i_ce $end
$var wire 1 ^ pc_i_change_pc $end
$var wire 32 _ pc_i_pc [31:0] $end
$var wire 1 ( pc_rst $end
$var reg 1 ` pc_o_ce $end
$var reg 32 a pc_o_pc [31:0] $end
$var reg 32 b temp_pc [31:0] $end
$upscope $end
$scope module i_m $end
$var wire 1 & im_clk $end
$var wire 32 c im_i_address [31:0] $end
$var wire 1 ? im_i_ce $end
$var wire 1 ( im_rst $end
$var reg 1 d im_o_ce $end
$var reg 32 e im_o_instr [31:0] $end
$upscope $end
$scope module ds $end
$var wire 5 f d_o_addr_rs [4:0] $end
$var wire 5 g d_o_addr_rt [4:0] $end
$var wire 1 h d_r_o_reg_dst $end
$var wire 1 i d_r_o_reg_wr $end
$var wire 1 & ds_clk $end
$var wire 5 j ds_i_addr_rd [4:0] $end
$var wire 1 k ds_i_ce $end
$var wire 32 l ds_i_data_rd [31:0] $end
$var wire 32 m ds_i_instr [31:0] $end
$var wire 1 ) ds_o_alu_src $end
$var wire 1 * ds_o_branch $end
$var wire 1 + ds_o_ce $end
$var wire 32 n ds_o_data_rs [31:0] $end
$var wire 32 o ds_o_data_rt [31:0] $end
$var wire 6 p ds_o_funct [5:0] $end
$var wire 16 q ds_o_imm [15:0] $end
$var wire 1 0 ds_o_memread $end
$var wire 1 1 ds_o_memtoreg $end
$var wire 1 2 ds_o_memwrite $end
$var wire 6 r ds_o_opcode [5:0] $end
$var wire 1 ( ds_rst $end
$var wire 5 s write_register [4:0] $end
$scope module d $end
$var wire 1 k d_i_ce $end
$var wire 6 t d_i_funct [5:0] $end
$var wire 32 u d_i_instr [31:0] $end
$var wire 6 v d_i_opcode [5:0] $end
$var wire 6 w funct [5:0] $end
$var wire 1 x funct_add $end
$var wire 1 y funct_and $end
$var wire 1 z funct_or $end
$var wire 1 { funct_sub $end
$var wire 1 | funct_xor $end
$var wire 16 } imm [15:0] $end
$var wire 1 ~ op_addi $end
$var wire 1 !" op_addiu $end
$var wire 1 "" op_andi $end
$var wire 1 #" op_beq $end
$var wire 1 $" op_bne $end
$var wire 1 %" op_load $end
$var wire 1 &" op_ori $end
$var wire 1 '" op_rtype $end
$var wire 1 (" op_slti $end
$var wire 1 )" op_sltiu $end
$var wire 1 *" op_store $end
$var wire 1 +" op_xori $end
$var wire 6 ," opcode [5:0] $end
$var wire 5 -" rd [4:0] $end
$var wire 5 ." rs [4:0] $end
$var wire 5 /" rt [4:0] $end
$var reg 5 0" d_o_addr_rd [4:0] $end
$var reg 5 1" d_o_addr_rs [4:0] $end
$var reg 5 2" d_o_addr_rt [4:0] $end
$var reg 1 3" d_o_alu_src $end
$var reg 1 4" d_o_branch $end
$var reg 1 5" d_o_ce $end
$var reg 6 6" d_o_funct [5:0] $end
$var reg 16 7" d_o_imm [15:0] $end
$var reg 1 8" d_o_memread $end
$var reg 1 9" d_o_memtoreg $end
$var reg 1 :" d_o_memwrite $end
$var reg 6 ;" d_o_opcode [5:0] $end
$var reg 1 <" d_o_reg_dst $end
$var reg 1 =" d_o_reg_wr $end
$upscope $end
$scope module r $end
$var wire 5 >" r_addr_in [4:0] $end
$var wire 5 ?" r_addr_out1 [4:0] $end
$var wire 5 @" r_addr_out2 [4:0] $end
$var wire 1 & r_clk $end
$var wire 32 A" r_data_in [31:0] $end
$var wire 32 B" r_data_out1 [31:0] $end
$var wire 32 C" r_data_out2 [31:0] $end
$var wire 1 ( r_rst $end
$var wire 1 i r_wr_en $end
$var integer 32 D" i [31:0] $end
$upscope $end
$upscope $end
$scope module es $end
$var wire 5 E" alu_control [4:0] $end
$var wire 32 F" alu_pc [31:0] $end
$var wire 32 G" alu_value [31:0] $end
$var wire 1 H" change_pc $end
$var wire 6 I" es_i_alu_funct [5:0] $end
$var wire 6 J" es_i_alu_op [5:0] $end
$var wire 1 K" es_i_alu_src $end
$var wire 1 L" es_i_branch $end
$var wire 1 M" es_i_ce $end
$var wire 32 N" es_i_data_rs [31:0] $end
$var wire 32 O" es_i_data_rt [31:0] $end
$var wire 16 P" es_i_imm [15:0] $end
$var wire 32 Q" es_i_pc [31:0] $end
$var wire 32 R" es_o_alu_pc [31:0] $end
$var wire 1 7 es_o_change_pc $end
$var wire 1 S" take_beq $end
$var wire 1 T" take_bne $end
$var wire 1 U" take_branch $end
$var wire 1 V" temp_zero $end
$var reg 32 W" es_o_alu_value [31:0] $end
$var reg 1 X" es_o_ce $end
$var reg 6 Y" es_o_funct [5:0] $end
$var reg 6 Z" es_o_opcode [5:0] $end
$var reg 1 [" es_o_zero $end
$scope module ac $end
$var wire 6 \" ac_i_funct [5:0] $end
$var wire 6 ]" ac_i_opcode [5:0] $end
$var reg 5 ^" ac_o_control [4:0] $end
$upscope $end
$scope module a $end
$var wire 1 K" a_i_alu_src $end
$var wire 32 _" a_i_data_rs [31:0] $end
$var wire 32 `" a_i_data_rt [31:0] $end
$var wire 5 a" a_i_funct [4:0] $end
$var wire 16 b" a_i_imm [15:0] $end
$var wire 32 c" a_i_pc [31:0] $end
$var wire 32 d" a_imm [31:0] $end
$var wire 32 e" a_o_data_2 [31:0] $end
$var wire 1 f" funct_add $end
$var wire 1 g" funct_addu $end
$var wire 1 h" funct_and $end
$var wire 1 i" funct_beq $end
$var wire 1 j" funct_bne $end
$var wire 1 k" funct_eq $end
$var wire 1 l" funct_ge $end
$var wire 1 m" funct_geu $end
$var wire 1 n" funct_neq $end
$var wire 1 o" funct_or $end
$var wire 1 p" funct_sll $end
$var wire 1 q" funct_slt $end
$var wire 1 r" funct_sltu $end
$var wire 1 s" funct_sra $end
$var wire 1 t" funct_srl $end
$var wire 1 u" funct_sub $end
$var wire 1 v" funct_xor $end
$var reg 1 w" a_o_change_pc $end
$var reg 32 x" alu_pc [31:0] $end
$var reg 32 y" alu_value [31:0] $end
$upscope $end
$upscope $end
$scope module m $end
$var wire 32 z" alu_value_addr [31:0] $end
$var wire 1 & m_clk $end
$var wire 1 {" m_i_ce $end
$var wire 32 |" m_i_store_data [31:0] $end
$var wire 32 }" m_o_load_data [31:0] $end
$var wire 1 ~" m_rd_en $end
$var wire 1 ( m_rst $end
$var wire 1 !# m_wr_en $end
$var integer 32 "# i [31:0] $end
$upscope $end
$upscope $end
$scope task reset $end
$var integer 32 ## counter [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10 ##
b100000 "#
0!#
0~"
b0 }"
b0 |"
0{"
b0 z"
b0 y"
b0 x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
1f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 _"
b0 ^"
b0 ]"
b0 \"
0["
b0 Z"
b0 Y"
0X"
b0 W"
1V"
0U"
0T"
0S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
0M"
0L"
0K"
b0 J"
b0 I"
0H"
b0 G"
b0 F"
b0 E"
b100000 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
0="
0<"
b0 ;"
0:"
09"
08"
b0 7"
b0 6"
05"
04"
03"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
0+"
0*"
0)"
0("
1'"
0&"
0%"
0$"
0#"
0""
0!"
0~
b0 }
0|
0{
0z
0y
0x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
0k
b0 j
0i
0h
b0 g
b0 f
b0 e
0d
b0 c
b0 b
b0 a
0`
b0 _
0^
0]
b0 \
b0 [
b0 Z
0Y
b0 X
0W
b0 V
0U
b0 T
0S
0R
0Q
b0 P
b0 O
0N
b0 M
b0 L
b0 K
0J
0I
0H
b0 G
b0 F
b0 E
b0 D
0C
0B
0A
b0 @
0?
b0 >
b0 =
b0 <
0;
0:
b0 9
b0 8
07
06
b0 5
b0 4
b0 3
02
01
00
b0 /
b0 .
b0 -
b0 ,
0+
0*
0)
0(
x'
0&
0%
x$
0#
b0 "
b0 !
$end
#5
1#
1&
#10
b100000 "#
b100000 D"
0#
0&
#15
1%
1(
1#
1&
#20
0#
0&
#25
b100 b
1`
1?
1$
1'
1#
1&
#30
0#
0&
#35
b1000 b
b100 a
b100 >
b100 c
1d
1;
b1000111010000000000000010100 e
b1000111010000000000000010100 <
1#
1&
#40
0#
0&
#45
b1000 s
b1000 >"
1:"
12
13"
1)
b10100 7"
b10100 /
b10100 q
b10 ;"
b10 3
b10 r
b1000 2"
b1000 -
b1000 o
b1000 C"
b1000 g
b1000 @"
b111 1"
b111 ,
b111 n
b111 B"
b111 f
b111 ?"
0'"
1*"
b10 v
b10100 t
b111 ."
b1000 /"
b10 ,"
b10100 w
b10100 }
0="
0i
0<"
0h
15"
1+
b1000111010000000000000010100 Z
b1000111010000000000000010100 m
b1000111010000000000000010100 u
1Y
1k
b100 X
b100 !
b100111001100000000000010100 e
b100111001100000000000010100 <
b1100 b
b1000 a
b1000 >
b1000 c
1#
1&
#50
0#
0&
#55
b110 s
b110 >"
19"
11
18"
10
1="
1i
0:"
02
13"
1)
15"
1+
b10100 7"
b10100 /
b10100 q
b1 ;"
b1 3
b1 r
b110 2"
b110 -
b110 o
b110 C"
b110 g
b110 @"
b111 1"
b111 ,
b111 n
b111 B"
b111 f
b111 ?"
0V"
b11011 W"
b11011 5
1%"
0*"
b1 v
b110 /"
b1 ,"
b10100 e"
b11011 y"
b11011 G"
1X"
16
0["
0:
b10 Z"
b10 9
b10000 b
b1100 a
b1100 >
b1100 c
bx e
bx <
b100111001100000000000010100 Z
b100111001100000000000010100 m
b100111001100000000000010100 u
b1000 X
b1000 !
b100 L
b100 Q"
b100 c"
1J
1A
1K"
1C
1M"
b10100 G
b10100 P"
b10100 b"
b10100 d"
b1000 E
b1000 O"
b1000 `"
b111 D
b111 N"
b111 _"
b10 K
b10 J"
b10 ]"
1#
1&
#60
b0 -
b0 o
b0 C"
0#
0&
#65
b0 s
b0 >"
09"
01
08"
00
0="
0i
03"
0)
05"
0+
b0 7"
b0 /
b0 q
b0 ;"
b0 3
b0 r
b0 2"
b0 g
b0 @"
b0 1"
b0 ,
b0 n
b0 B"
b0 f
b0 ?"
b11011 y"
b11011 G"
1X"
16
b1 Z"
b1 9
b11011 W"
b11011 5
x'"
x%"
x*"
x#"
x$"
x~
x!"
x("
x)"
x""
x&"
x+"
bx v
xx
x{
xy
xz
x|
bx t
bx ."
bx /"
bx -"
bx ,"
bx w
bx }
1S
1!#
b1000 O
b1000 |"
1N
1{"
b10 T
b11011 M
b11011 z"
b11011 =
b11011 }"
b1000 L
b1000 Q"
b1000 c"
1I
0J
1H
b0 E
b0 O"
b0 `"
b1 K
b1 J"
b1 ]"
bx Z
bx m
bx u
b1100 X
b1100 !
b10100 b
b10000 a
b10000 >
b10000 c
1#
1&
#70
b1000 =
b1000 }"
0#
0&
#75
1V"
b0 e"
b0 y"
b0 G"
0X"
06
b0 Z"
b0 9
b0 W"
b0 5
b11011 "
b11011 @
b11011 l
b11011 A"
b11000 b
b10100 a
b10100 >
b10100 c
b10000 X
b10000 !
b1100 L
b1100 Q"
b1100 c"
0I
0H
0A
0K"
0C
0M"
b0 G
b0 P"
b0 b"
b0 d"
b0 D
b0 N"
b0 _"
b0 K
b0 J"
b0 ]"
1R
0S
0!#
1Q
1~"
b0 O
b0 |"
b1 T
b11011 [
b1000 \
1#
1&
#80
0#
0&
#85
b1000 "
b1000 @
b1000 l
b1000 A"
1]
0R
0Q
0~"
0N
0{"
b0 T
b0 M
b0 z"
b0 =
b0 }"
b10000 L
b10000 Q"
b10000 c"
b10100 X
b10100 !
b11100 b
b11000 a
b11000 >
b11000 c
1#
1&
#90
0#
0&
#95
b0 "
b0 @
b0 l
b0 A"
b100000 b
b11100 a
b11100 >
b11100 c
b11000 X
b11000 !
b10100 L
b10100 Q"
b10100 c"
b0 [
b0 \
0]
1#
1&
#100
0#
0&
#105
b11000 L
b11000 Q"
b11000 c"
b11100 X
b11100 !
b100100 b
b100000 a
b100000 >
b100000 c
1#
1&
#110
0#
0&
#115
b101000 b
b100100 a
b100100 >
b100100 c
b100000 X
b100000 !
b11100 L
b11100 Q"
b11100 c"
1#
1&
#120
0#
0&
#125
b100000 L
b100000 Q"
b100000 c"
b100100 X
b100100 !
b101100 b
b101000 a
b101000 >
b101000 c
1#
1&
#130
0#
0&
#135
b110000 b
b101100 a
b101100 >
b101100 c
b101000 X
b101000 !
b100100 L
b100100 Q"
b100100 c"
1#
1&
#140
0#
0&
#145
b101000 L
b101000 Q"
b101000 c"
b101100 X
b101100 !
b110100 b
b110000 a
b110000 >
b110000 c
1#
1&
#150
0#
0&
#155
b111000 b
b110100 a
b110100 >
b110100 c
b110000 X
b110000 !
b101100 L
b101100 Q"
b101100 c"
1#
1&
#160
0#
0&
#165
b110000 L
b110000 Q"
b110000 c"
b110100 X
b110100 !
b111100 b
b111000 a
b111000 >
b111000 c
1#
1&
#170
0#
0&
#175
b1000000 b
b111100 a
b111100 >
b111100 c
b111000 X
b111000 !
b110100 L
b110100 Q"
b110100 c"
1#
1&
#180
0#
0&
#185
b111000 L
b111000 Q"
b111000 c"
b111100 X
b111100 !
b1000100 b
b1000000 a
b1000000 >
b1000000 c
1#
1&
#190
0#
0&
#195
b1001000 b
b1000100 a
b1000100 >
b1000100 c
b1000000 X
b1000000 !
b111100 L
b111100 Q"
b111100 c"
1#
1&
#200
0#
0&
#205
b1000000 L
b1000000 Q"
b1000000 c"
b1000100 X
b1000100 !
b1001100 b
b1001000 a
b1001000 >
b1001000 c
1#
1&
#210
0#
0&
#215
b1010000 b
b1001100 a
b1001100 >
b1001100 c
b1001000 X
b1001000 !
b1000100 L
b1000100 Q"
b1000100 c"
1#
1&
#220
0#
0&
#225
b1001000 L
b1001000 Q"
b1001000 c"
b1001100 X
b1001100 !
b1010100 b
b1010000 a
b1010000 >
b1010000 c
1#
1&
#230
0#
0&
#235
b1011000 b
b1010100 a
b1010100 >
b1010100 c
b1010000 X
b1010000 !
b1001100 L
b1001100 Q"
b1001100 c"
1#
1&
#240
0#
0&
#245
b1010000 L
b1010000 Q"
b1010000 c"
b1010100 X
b1010100 !
b1011100 b
b1011000 a
b1011000 >
b1011000 c
1#
1&
#250
0#
0&
#255
b1100000 b
b1011100 a
b1011100 >
b1011100 c
b1011000 X
b1011000 !
b1010100 L
b1010100 Q"
b1010100 c"
1#
1&
#260
0#
0&
#265
b1011000 L
b1011000 Q"
b1011000 c"
b1011100 X
b1011100 !
b1100100 b
b1100000 a
b1100000 >
b1100000 c
1#
1&
