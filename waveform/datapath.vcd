$date
	Thu Oct 23 20:41:01 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 32 ! im_ds_o_pc [31:0] $end
$var wire 32 " write_back_data [31:0] $end
$var reg 1 # d_clk $end
$var reg 1 $ d_i_ce $end
$var reg 1 % d_rst $end
$scope module d $end
$var wire 1 & d_clk $end
$var wire 1 ' d_i_ce $end
$var wire 1 ( d_rst $end
$var wire 5 ) ds_o_addr_rd [4:0] $end
$var wire 5 * ds_o_addr_rs [4:0] $end
$var wire 5 + ds_o_addr_rt [4:0] $end
$var wire 32 , ds_o_alu_pc [31:0] $end
$var wire 1 - ds_o_alu_src $end
$var wire 1 . ds_o_branch $end
$var wire 1 / ds_o_ce $end
$var wire 1 0 ds_o_change_pc $end
$var wire 32 1 ds_o_data_rs [31:0] $end
$var wire 32 2 ds_o_data_rt [31:0] $end
$var wire 6 3 ds_o_funct [5:0] $end
$var wire 16 4 ds_o_imm [15:0] $end
$var wire 1 5 ds_o_jal $end
$var wire 26 6 ds_o_jal_addr [25:0] $end
$var wire 1 7 ds_o_jr $end
$var wire 1 8 ds_o_memtoreg $end
$var wire 1 9 ds_o_memwrite $end
$var wire 6 : ds_o_opcode [5:0] $end
$var wire 1 ; ds_o_reg_wr $end
$var wire 32 < es_o_alu_pc [31:0] $end
$var wire 32 = es_o_alu_value [31:0] $end
$var wire 1 > es_o_ce $end
$var wire 1 ? es_o_change_pc $end
$var wire 6 @ es_o_opcode [5:0] $end
$var wire 1 A f_o_stall $end
$var wire 2 B forward_rs1 [1:0] $end
$var wire 2 C forward_rs2 [1:0] $end
$var wire 1 D im_o_ce $end
$var wire 32 E im_o_instr [31:0] $end
$var wire 32 F ms_o_load_data [31:0] $end
$var wire 5 G mx_es_o_addr_rd [4:0] $end
$var wire 32 H mx_es_o_data_rs1 [31:0] $end
$var wire 32 I mx_es_o_data_rs2 [31:0] $end
$var wire 32 J mx_pc_o_alu_pc [31:0] $end
$var wire 1 K mx_pc_o_change_pc $end
$var wire 1 L pc_o_ce $end
$var wire 32 M pc_o_pc [31:0] $end
$var wire 32 N tl_o_load_data [31:0] $end
$var wire 32 O ts_o_store_data [31:0] $end
$var wire 4 P ts_o_store_mask [3:0] $end
$var wire 32 Q write_back_data [31:0] $end
$var reg 5 R ds_es_o_addr_rt [4:0] $end
$var reg 1 S ds_es_o_alu_src $end
$var reg 1 T ds_es_o_branch $end
$var reg 1 U ds_es_o_ce $end
$var reg 6 V ds_es_o_funct [5:0] $end
$var reg 16 W ds_es_o_imm [15:0] $end
$var reg 1 X ds_es_o_jal $end
$var reg 26 Y ds_es_o_jal_addr [25:0] $end
$var reg 1 Z ds_es_o_jr $end
$var reg 1 [ ds_es_o_memtoreg $end
$var reg 1 \ ds_es_o_memwrite $end
$var reg 6 ] ds_es_o_opcode [5:0] $end
$var reg 32 ^ ds_es_o_pc [31:0] $end
$var reg 1 _ ds_es_o_reg_wr $end
$var reg 5 ` ds_f_o_addr_rs [4:0] $end
$var reg 5 a ds_mx_o_addr_rd [4:0] $end
$var reg 32 b ds_mx_o_data_rs [31:0] $end
$var reg 32 c ds_mx_o_data_rt [31:0] $end
$var reg 32 d es_ms_alu_value [31:0] $end
$var reg 5 e es_ms_o_addr_rd [4:0] $end
$var reg 1 f es_ms_o_ce $end
$var reg 32 g es_ms_o_data_rt [31:0] $end
$var reg 1 h es_ms_o_memtoreg $end
$var reg 1 i es_ms_o_memwrite $end
$var reg 6 j es_ms_o_opcode [5:0] $end
$var reg 1 k es_ms_o_regwr $end
$var reg 32 l es_pc_o_alu_pc [31:0] $end
$var reg 1 m es_pc_o_change_pc $end
$var reg 1 n im_ds_o_ce $end
$var reg 32 o im_ds_o_instr [31:0] $end
$var reg 32 p im_ds_o_pc [31:0] $end
$var reg 5 q ms_wb_o_addr_rd [4:0] $end
$var reg 32 r ms_wb_o_alu_value [31:0] $end
$var reg 32 s ms_wb_o_load_data [31:0] $end
$var reg 1 t ms_wb_o_memtoreg $end
$var reg 1 u ms_wb_o_regwr $end
$var reg 1 v pc_im_o_ce $end
$var reg 32 w pc_im_o_pc [31:0] $end
$var reg 4 x ts_ms_o_store_mask [3:0] $end
$scope module p_c $end
$var wire 1 & pc_clk $end
$var wire 1 ' pc_i_ce $end
$var wire 1 y pc_i_change_pc $end
$var wire 32 z pc_i_pc [31:0] $end
$var wire 1 ( pc_rst $end
$var reg 1 { pc_o_ce $end
$var reg 32 | pc_o_pc [31:0] $end
$var reg 32 } temp_pc [31:0] $end
$upscope $end
$scope module i_m $end
$var wire 1 & im_clk $end
$var wire 32 ~ im_i_address [31:0] $end
$var wire 1 !" im_i_ce $end
$var wire 1 ( im_rst $end
$var reg 1 "" im_o_ce $end
$var reg 32 #" im_o_instr [31:0] $end
$upscope $end
$scope module ds $end
$var wire 1 & ds_clk $end
$var wire 5 $" ds_i_addr_rd [4:0] $end
$var wire 1 %" ds_i_ce $end
$var wire 32 &" ds_i_data_rd [31:0] $end
$var wire 32 '" ds_i_instr [31:0] $end
$var wire 1 (" ds_i_reg_wr $end
$var wire 5 )" ds_o_addr_rd [4:0] $end
$var wire 5 *" ds_o_addr_rs [4:0] $end
$var wire 5 +" ds_o_addr_rt [4:0] $end
$var wire 1 - ds_o_alu_src $end
$var wire 32 ," ds_o_alu_value [31:0] $end
$var wire 1 . ds_o_branch $end
$var wire 1 / ds_o_ce $end
$var wire 32 -" ds_o_data_rs [31:0] $end
$var wire 32 ." ds_o_data_rt [31:0] $end
$var wire 6 /" ds_o_funct [5:0] $end
$var wire 16 0" ds_o_imm [15:0] $end
$var wire 1 5 ds_o_jal $end
$var wire 26 1" ds_o_jal_addr [25:0] $end
$var wire 1 7 ds_o_jr $end
$var wire 1 8 ds_o_memtoreg $end
$var wire 1 9 ds_o_memwrite $end
$var wire 6 2" ds_o_opcode [5:0] $end
$var wire 1 ; ds_o_reg_wr $end
$var wire 1 ( ds_rst $end
$scope module d $end
$var wire 1 %" d_i_ce $end
$var wire 6 3" d_i_funct [5:0] $end
$var wire 32 4" d_i_instr [31:0] $end
$var wire 6 5" d_i_opcode [5:0] $end
$var wire 6 6" funct [5:0] $end
$var wire 1 7" funct_jr $end
$var wire 16 8" imm [15:0] $end
$var wire 1 9" op_addi $end
$var wire 1 :" op_addiu $end
$var wire 1 ;" op_andi $end
$var wire 1 <" op_beq $end
$var wire 1 =" op_bne $end
$var wire 1 >" op_jal $end
$var wire 1 ?" op_load $end
$var wire 1 @" op_ori $end
$var wire 1 A" op_rtype $end
$var wire 1 B" op_slti $end
$var wire 1 C" op_sltiu $end
$var wire 1 D" op_store $end
$var wire 6 E" opcode [5:0] $end
$var wire 5 F" rd [4:0] $end
$var wire 5 G" rs [4:0] $end
$var wire 5 H" rt [4:0] $end
$var wire 26 I" temp_jal [25:0] $end
$var reg 5 J" d_o_addr_rd [4:0] $end
$var reg 5 K" d_o_addr_rs [4:0] $end
$var reg 5 L" d_o_addr_rt [4:0] $end
$var reg 1 M" d_o_alu_src $end
$var reg 1 N" d_o_branch $end
$var reg 1 O" d_o_ce $end
$var reg 6 P" d_o_funct [5:0] $end
$var reg 16 Q" d_o_imm [15:0] $end
$var reg 1 R" d_o_jal $end
$var reg 26 S" d_o_jal_addr [25:0] $end
$var reg 1 T" d_o_jr $end
$var reg 1 U" d_o_memtoreg $end
$var reg 1 V" d_o_memwrite $end
$var reg 6 W" d_o_opcode [5:0] $end
$var reg 1 X" d_o_reg_wr $end
$upscope $end
$scope module r $end
$var wire 5 Y" r_addr_in [4:0] $end
$var wire 5 Z" r_addr_out1 [4:0] $end
$var wire 5 [" r_addr_out2 [4:0] $end
$var wire 1 & r_clk $end
$var wire 32 \" r_data_in [31:0] $end
$var wire 32 ]" r_data_out1 [31:0] $end
$var wire 32 ^" r_data_out2 [31:0] $end
$var wire 1 ( r_rst $end
$var wire 1 (" r_wr_en $end
$var integer 32 _" i [31:0] $end
$upscope $end
$upscope $end
$scope module m1 $end
$var wire 32 `" a [31:0] $end
$var wire 32 a" b [31:0] $end
$var wire 32 b" c [31:0] $end
$var wire 32 c" data_out [31:0] $end
$var wire 2 d" sel [1:0] $end
$upscope $end
$scope module m2 $end
$var wire 32 e" a [31:0] $end
$var wire 32 f" b [31:0] $end
$var wire 32 g" c [31:0] $end
$var wire 32 h" data_out [31:0] $end
$var wire 2 i" sel [1:0] $end
$upscope $end
$scope module m3 $end
$var wire 5 j" a [4:0] $end
$var wire 5 k" b [4:0] $end
$var wire 1 l" op_itype $end
$var wire 1 m" op_rtype $end
$var wire 6 n" opcode [5:0] $end
$var wire 5 o" out [4:0] $end
$upscope $end
$scope module es $end
$var wire 5 p" alu_control [4:0] $end
$var wire 32 q" alu_pc [31:0] $end
$var wire 32 r" alu_value [31:0] $end
$var wire 1 s" change_pc $end
$var wire 6 t" es_i_alu_funct [5:0] $end
$var wire 6 u" es_i_alu_op [5:0] $end
$var wire 1 v" es_i_alu_src $end
$var wire 1 w" es_i_branch $end
$var wire 1 x" es_i_ce $end
$var wire 32 y" es_i_data_rs [31:0] $end
$var wire 32 z" es_i_data_rt [31:0] $end
$var wire 16 {" es_i_imm [15:0] $end
$var wire 1 |" es_i_jal $end
$var wire 26 }" es_i_jal_addr [25:0] $end
$var wire 1 ~" es_i_jr $end
$var wire 32 !# es_i_pc [31:0] $end
$var wire 32 "# es_o_alu_pc [31:0] $end
$var wire 1 ? es_o_change_pc $end
$var wire 1 ## take_beq $end
$var wire 1 $# take_bne $end
$var wire 1 %# take_branch $end
$var wire 1 &# take_jal $end
$var wire 1 '# take_jr $end
$var wire 32 (# temp_alu_value [31:0] $end
$var wire 1 )# temp_jal_change_pc $end
$var wire 32 *# temp_pc [31:0] $end
$var wire 32 +# temp_ra [31:0] $end
$var wire 1 ,# temp_zero $end
$var reg 32 -# es_o_alu_value [31:0] $end
$var reg 1 .# es_o_ce $end
$var reg 6 /# es_o_opcode [5:0] $end
$scope module ac $end
$var wire 6 0# ac_i_funct [5:0] $end
$var wire 6 1# ac_i_opcode [5:0] $end
$var reg 5 2# ac_o_control [4:0] $end
$upscope $end
$scope module a $end
$var wire 1 v" a_i_alu_src $end
$var wire 32 3# a_i_data_rs [31:0] $end
$var wire 32 4# a_i_data_rt [31:0] $end
$var wire 5 5# a_i_funct [4:0] $end
$var wire 16 6# a_i_imm [15:0] $end
$var wire 32 7# a_i_pc [31:0] $end
$var wire 32 8# a_imm [31:0] $end
$var wire 32 9# a_o_data_2 [31:0] $end
$var wire 1 :# funct_add $end
$var wire 1 ;# funct_addu $end
$var wire 1 <# funct_and $end
$var wire 1 =# funct_beq $end
$var wire 1 ># funct_bne $end
$var wire 1 ?# funct_eq $end
$var wire 1 @# funct_ge $end
$var wire 1 A# funct_geu $end
$var wire 1 B# funct_jr $end
$var wire 1 C# funct_lui $end
$var wire 1 D# funct_neq $end
$var wire 1 E# funct_nor $end
$var wire 1 F# funct_or $end
$var wire 1 G# funct_sll $end
$var wire 1 H# funct_slt $end
$var wire 1 I# funct_sltu $end
$var wire 1 J# funct_sra $end
$var wire 1 K# funct_srl $end
$var wire 1 L# funct_sub $end
$var wire 1 M# funct_subu $end
$var reg 1 N# a_o_change_pc $end
$var reg 32 O# alu_pc [31:0] $end
$var reg 32 P# alu_value [31:0] $end
$upscope $end
$scope module tj $end
$var wire 32 Q# temp_jumpaddr [31:0] $end
$var wire 1 |" tj_i_jal $end
$var wire 26 R# tj_i_jal_addr [25:0] $end
$var wire 32 S# tj_i_pc [31:0] $end
$var reg 1 T# tj_o_change_pc $end
$var reg 32 U# tj_o_pc [31:0] $end
$var reg 32 V# tj_o_ra [31:0] $end
$upscope $end
$upscope $end
$scope module ts $end
$var wire 6 W# ts_i_opcode [5:0] $end
$var wire 32 X# ts_i_store_data [31:0] $end
$var reg 32 Y# ts_o_store_data [31:0] $end
$var reg 4 Z# ts_o_store_mask [3:0] $end
$upscope $end
$scope module m4 $end
$var wire 1 0 a $end
$var wire 1 y b $end
$var wire 32 [# c [31:0] $end
$var wire 32 \# d [31:0] $end
$var wire 32 ]# e [31:0] $end
$var wire 32 ^# f [31:0] $end
$var wire 6 _# funct [5:0] $end
$var wire 6 `# opcode [5:0] $end
$var wire 1 a# type_branch $end
$var wire 1 b# type_jump $end
$var reg 32 c# out_alu_pc [31:0] $end
$var reg 32 d# out_alu_value [31:0] $end
$var reg 1 e# out_change_pc $end
$upscope $end
$scope module m $end
$var wire 32 f# alu_value_addr [31:0] $end
$var wire 1 & m_clk $end
$var wire 1 g# m_i_ce $end
$var wire 4 h# m_i_mask [3:0] $end
$var wire 32 i# m_i_store_data [31:0] $end
$var wire 32 j# m_o_load_data [31:0] $end
$var wire 1 ( m_rst $end
$var wire 1 k# m_wr_en $end
$var integer 32 l# i [31:0] $end
$upscope $end
$scope module tl $end
$var wire 32 m# tl_i_load_data [31:0] $end
$var wire 6 n# tl_i_opcode [5:0] $end
$var reg 32 o# tl_o_load_data [31:0] $end
$upscope $end
$scope module f $end
$var wire 5 p# ds_es_i_addr_rs1 [4:0] $end
$var wire 5 q# ds_es_i_addr_rs2 [4:0] $end
$var wire 6 r# ds_es_i_opcode [5:0] $end
$var wire 1 s# ds_es_op_load $end
$var wire 5 t# es_ms_i_addr_rd [4:0] $end
$var wire 1 u# es_ms_i_regwrite $end
$var wire 5 v# ms_wb_i_addr_rd [4:0] $end
$var wire 1 (" ms_wb_i_regwrite $end
$var reg 2 w# f_o_control_rs1 [1:0] $end
$var reg 2 x# f_o_control_rs2 [1:0] $end
$var reg 1 y# f_o_stall $end
$upscope $end
$upscope $end
$scope task reset $end
$var integer 32 z# counter [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10 z#
0y#
b0 x#
b0 w#
b0 v#
0u#
b0 t#
0s#
b0 r#
b0 q#
b0 p#
b0 o#
b0 n#
b0 m#
b100000 l#
0k#
b0 j#
b0 i#
b0 h#
0g#
b0 f#
0e#
b0 d#
b0 c#
0b#
0a#
b0 `#
b0 _#
bz ^#
bz ]#
b0 \#
bz [#
b0 Z#
b0 Y#
b0 X#
b0 W#
b0 V#
b0 U#
0T#
b0 S#
b0 R#
b0 Q#
b0 P#
b0 O#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
1G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
b0 9#
b0 8#
b0 7#
b0 6#
b111 5#
b0 4#
b0 3#
b111 2#
b0 1#
b0 0#
b0 /#
0.#
b0 -#
1,#
b0 +#
b0 *#
0)#
b0 (#
0'#
0&#
0%#
0$#
0##
b0 "#
b0 !#
0~"
b0 }"
0|"
b0 {"
b0 z"
b0 y"
0x"
0w"
0v"
b0 u"
b0 t"
0s"
b0 r"
b0 q"
b111 p"
b0 o"
b0 n"
1m"
0l"
b0 k"
b0 j"
b0 i"
b0 h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b100000 _"
b0 ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
0X"
b0 W"
0V"
0U"
0T"
b0 S"
0R"
b0 Q"
b0 P"
0O"
0N"
0M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
0D"
0C"
0B"
1A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
b0 8"
07"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
bz ,"
b0 +"
b0 *"
b0 )"
0("
b0 '"
b0 &"
0%"
b0 $"
b0 #"
0""
0!"
b0 ~
b0 }
b0 |
0{
b0 z
0y
b0 x
b0 w
0v
0u
0t
b0 s
b0 r
b0 q
b0 p
b0 o
0n
0m
b0 l
0k
b0 j
0i
0h
b0 g
0f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
0_
b0 ^
b0 ]
0\
0[
0Z
b0 Y
0X
b0 W
b0 V
0U
0T
0S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
0L
0K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
0D
b0 C
b0 B
0A
b0 @
0?
0>
b0 =
b0 <
0;
b0 :
09
08
07
b0 6
05
b0 4
b0 3
b0 2
b0 1
z0
0/
0.
0-
bz ,
b0 +
b0 *
b0 )
0(
x'
0&
0%
x$
0#
b0 "
b0 !
$end
#5
1#
1&
#10
b100000 l#
b100000 _"
0#
0&
#15
1%
1(
1#
1&
#20
0#
0&
#25
b100 }
1{
1L
1$
1'
1#
1&
#30
0#
0&
#35
b1000 }
b100 |
b100 M
1v
1!"
1#
1&
#40
0#
0&
#45
b100 w
b100 ~
1""
1D
b1100010000000000000000000000 #"
b1100010000000000000000000000 E
b1100 }
b1000 |
b1000 M
1#
1&
#50
0#
0&
#55
b10000000000000000000000 S"
b10000000000000000000000 6
b10000000000000000000000 1"
1R"
15
b11 W"
b11 :
b11 2"
b11111 J"
b11111 )
b11111 )"
0A"
1>"
b11 5"
b10 G"
b11 E"
b10000000000000000000000 I"
1X"
1;
1O"
1/
b10000 }
b1100 |
b1100 M
b11111000000000000000001000 #"
b11111000000000000000001000 E
b1000 w
b1000 ~
b1100010000000000000000000000 o
b1100010000000000000000000000 '"
b1100010000000000000000000000 4"
b100 p
b100 !
1n
1%"
1#
1&
#60
0#
0&
#65
b1000000000000000000000000 <
b1000000000000000000000000 "#
1?
b1000 -#
b1000 =
1T"
17
b1000 P"
b1000 3
b1000 /"
b11111 K"
b11111 1
b11111 -"
b11111 ]"
b11111 *
b11111 *"
b11111 Z"
b0 S"
b0 6
b0 1"
0R"
05
0X"
0;
1O"
1/
b0 W"
b0 :
b0 2"
b0 J"
b0 )
b0 )"
b0 2#
1:#
0G#
b0 p"
b0 5#
b1000 (#
1T#
1)#
b1000 V#
b1000 +#
b1000000000000000000000000 U#
b1000000000000000000000000 *#
b11 /#
b11 @
1.#
1>
17"
b1000 3"
1A"
0>"
b0 5"
b11111 G"
b0 E"
b1000 6"
b1000 8"
b11111000000000000000001000 I"
b10000000000000000000000 Y
b10000000000000000000000 }"
b10000000000000000000000 R#
b1000000000000000000000000 Q#
b11111 a
b11111 k"
b11 ]
b11 n"
b11 u"
b11 1#
b11 W#
b11 r#
0m"
1_
b100 ^
b100 !#
b100 7#
b100 S#
1X
1&#
1|"
1U
1x"
b11111000000000000000001000 o
b11111000000000000000001000 '"
b11111000000000000000001000 4"
b1000 p
b1000 !
b1100 w
b1100 ~
bx #"
bx E
b10100 }
b10000 |
b10000 M
1#
1&
#70
0#
0&
#75
b1000 <
b1000 "#
b1000 9#
b1000 O#
b1000 q"
1?
b1000 I
b1000 h"
b1000 z"
b1000 4#
b1000 X#
0T"
07
0O"
0/
b0 P"
b0 3
b0 /"
b0 K"
b0 1
b0 -"
b0 ]"
b0 *
b0 *"
b0 Z"
1N#
1s"
x7"
bx 3"
xA"
x?"
xD"
x<"
x="
x9"
x:"
xB"
xC"
x;"
x@"
x>"
bx 5"
bx G"
bx H"
bx F"
bx E"
bx 6"
bx 8"
bx I"
b11111 H
b11111 c"
b11111 y"
b11111 3#
b0 /#
b0 @
1.#
1>
b0 -#
b0 =
b10011 2#
0:#
1B#
b10011 p"
b10011 5#
b0 (#
0T#
0)#
b0 U#
b0 *#
b0 V#
b0 +#
b1 x#
b1 C
b1 i"
bz d#
b1000000000000000000000000 c#
b1000000000000000000000000 J
1e#
1K
1b#
b11000 }
b10100 |
b10100 M
b10000 w
b10000 ~
bx o
bx '"
bx 4"
b1100 p
b1100 !
b0 Y
b0 }"
b0 R#
b0 Q#
b0 a
b0 k"
b11111 b
b11111 `"
b11111 `
b11111 p#
b0 ]
b0 n"
b0 u"
b0 1#
b0 W#
b0 r#
1m"
0_
b1000 V
b1000 t"
b1000 0#
b1000 _#
b1000 ^
b1000 !#
b1000 7#
b1000 S#
0X
0&#
0|"
1Z
1'#
1~"
1m
1y
b1000 d
b1000 a"
b1000 f"
b1000 f#
b1000 F
b1000 j#
b1000 m#
1k
1u#
b1000000000000000000000000 l
b1000000000000000000000000 z
b1000000000000000000000000 \#
b11 j
b11 `#
b11 n#
1f
1g#
1#
1&
#80
0#
0&
#85
b100000000000 (#
0,#
b100000000000 P#
b100000000000 r"
b1000 9#
b0 <
b0 "#
b1000 I
b1000 h"
b1000 z"
b1000 4#
b1000 X#
0?
b1000 "
b1000 Q
b1000 &"
b1000 \"
b1000 b"
b1000 g"
b0 d#
b0 c#
b0 J
0e#
0K
b1000 H
b1000 c"
b1000 y"
b1000 3#
b10 w#
b10 B
b10 d"
b10 x#
b10 C
b10 i"
1G#
b111 2#
0:#
0B#
b111 p"
b111 5#
0b#
0N#
0s"
b0 O#
b0 q"
0.#
0>
1u
1("
b1000 r
b1000 s
b0 d
b0 a"
b0 f"
b0 f#
b0 F
b0 j#
b0 m#
0k
0u#
b1000 l
b1000 z
b1000 \#
b0 j
b0 `#
b0 n#
b0 b
b0 `"
b0 `
b0 p#
b0 V
b0 t"
b0 0#
b0 _#
b1100 ^
b1100 !#
b1100 7#
b1100 S#
0Z
0'#
0~"
0U
0x"
b10000 p
b10000 !
b10100 w
b10100 ~
b1000000000000000000000000 }
b11000 |
b11000 M
1#
1&
#90
b1000 1
b1000 -"
b1000 ]"
b1000 2
b1000 ."
b1000 ^"
0#
0&
#95
b100000000000 P#
b100000000000 r"
b0 x#
b0 C
b0 i"
b0 w#
b0 B
b0 d"
b0 "
b0 Q
b0 &"
b0 \"
b0 b"
b0 g"
b1000 }
b1000000000000000000000000 |
b1000000000000000000000000 M
b11000 w
b11000 ~
b10100 p
b10100 !
b1000 b
b1000 `"
b1000 c
b1000 e"
b10000 ^
b10000 !#
b10000 7#
b10000 S#
0m
0y
b0 l
b0 z
b0 \#
0f
0g#
0u
0("
b0 r
b0 s
1#
1&
#100
0#
0&
#105
b100000000000 P#
b100000000000 r"
b10100 ^
b10100 !#
b10100 7#
b10100 S#
b11000 p
b11000 !
b1000000000000000000000000 w
b1000000000000000000000000 ~
b1100 }
b1000 |
b1000 M
1#
1&
#110
0#
0&
#115
b100000000000 P#
b100000000000 r"
b10000 }
b1100 |
b1100 M
b1000 w
b1000 ~
b1000000000000000000000000 p
b1000000000000000000000000 !
b11000 ^
b11000 !#
b11000 7#
b11000 S#
1#
1&
#120
0#
0&
#125
b100000000000 P#
b100000000000 r"
b1000000000000000000000000 ^
b1000000000000000000000000 !#
b1000000000000000000000000 7#
b1000000000000000000000000 S#
b1000 p
b1000 !
b1100 w
b1100 ~
b10100 }
b10000 |
b10000 M
1#
1&
#130
0#
0&
#135
b100000000000 P#
b100000000000 r"
b11000 }
b10100 |
b10100 M
b10000 w
b10000 ~
b1100 p
b1100 !
b1000 ^
b1000 !#
b1000 7#
b1000 S#
1#
1&
#140
0#
0&
#145
b100000000000 P#
b100000000000 r"
b1100 ^
b1100 !#
b1100 7#
b1100 S#
b10000 p
b10000 !
b10100 w
b10100 ~
b11100 }
b11000 |
b11000 M
1#
1&
#150
0#
0&
#155
b100000000000 P#
b100000000000 r"
b100000 }
b11100 |
b11100 M
b11000 w
b11000 ~
b10100 p
b10100 !
b10000 ^
b10000 !#
b10000 7#
b10000 S#
1#
1&
#160
0#
0&
#165
b100000000000 P#
b100000000000 r"
b10100 ^
b10100 !#
b10100 7#
b10100 S#
b11000 p
b11000 !
b11100 w
b11100 ~
b100100 }
b100000 |
b100000 M
1#
1&
#170
0#
0&
#175
b100000000000 P#
b100000000000 r"
b101000 }
b100100 |
b100100 M
b100000 w
b100000 ~
b11100 p
b11100 !
b11000 ^
b11000 !#
b11000 7#
b11000 S#
1#
1&
#180
0#
0&
#185
b100000000000 P#
b100000000000 r"
b11100 ^
b11100 !#
b11100 7#
b11100 S#
b100000 p
b100000 !
b100100 w
b100100 ~
b101100 }
b101000 |
b101000 M
1#
1&
#190
0#
0&
#195
b100000000000 P#
b100000000000 r"
b110000 }
b101100 |
b101100 M
b101000 w
b101000 ~
b100100 p
b100100 !
b100000 ^
b100000 !#
b100000 7#
b100000 S#
1#
1&
#200
0#
0&
#205
b100000000000 P#
b100000000000 r"
b100100 ^
b100100 !#
b100100 7#
b100100 S#
b101000 p
b101000 !
b101100 w
b101100 ~
b110100 }
b110000 |
b110000 M
1#
1&
#210
0#
0&
#215
b100000000000 P#
b100000000000 r"
b111000 }
b110100 |
b110100 M
b110000 w
b110000 ~
b101100 p
b101100 !
b101000 ^
b101000 !#
b101000 7#
b101000 S#
1#
1&
#220
0#
0&
#225
b100000000000 P#
b100000000000 r"
b101100 ^
b101100 !#
b101100 7#
b101100 S#
b110000 p
b110000 !
b110100 w
b110100 ~
b111100 }
b111000 |
b111000 M
1#
1&
#230
0#
0&
#235
b100000000000 P#
b100000000000 r"
b1000000 }
b111100 |
b111100 M
b111000 w
b111000 ~
b110100 p
b110100 !
b110000 ^
b110000 !#
b110000 7#
b110000 S#
1#
1&
#240
0#
0&
#245
b100000000000 P#
b100000000000 r"
b110100 ^
b110100 !#
b110100 7#
b110100 S#
b111000 p
b111000 !
b111100 w
b111100 ~
b1000100 }
b1000000 |
b1000000 M
1#
1&
#250
0#
0&
#255
b100000000000 P#
b100000000000 r"
b1001000 }
b1000100 |
b1000100 M
b1000000 w
b1000000 ~
b111100 p
b111100 !
b111000 ^
b111000 !#
b111000 7#
b111000 S#
1#
1&
#260
0#
0&
#265
b100000000000 P#
b100000000000 r"
b111100 ^
b111100 !#
b111100 7#
b111100 S#
b1000000 p
b1000000 !
b1000100 w
b1000100 ~
b1001100 }
b1001000 |
b1001000 M
1#
1&
