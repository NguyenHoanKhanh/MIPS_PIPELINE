$date
	Sun Oct 05 16:40:12 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 32 ! p_o_pc [31:0] $end
$var wire 32 " p_wb_data [31:0] $end
$var reg 1 # p_clk $end
$var reg 1 $ p_i_ce $end
$var reg 1 % p_rst $end
$scope module p $end
$var wire 1 & c_d_o_ALUSrc $end
$var wire 1 ' c_d_o_Branch $end
$var wire 1 ( c_d_o_MemRead $end
$var wire 1 ) c_d_o_MemWrite $end
$var wire 1 * c_d_o_MemtoReg $end
$var wire 1 + c_d_o_RegDst $end
$var wire 1 , c_d_o_RegWrite $end
$var wire 6 - d_c_o_opcode [5:0] $end
$var wire 1 . p_clk $end
$var wire 1 / p_i_ce $end
$var wire 32 0 p_o_pc [31:0] $end
$var wire 1 1 p_rst $end
$var wire 32 2 p_wb_data [31:0] $end
$scope module d $end
$var wire 1 . d_clk $end
$var wire 1 & d_i_ALUSrc $end
$var wire 1 ( d_i_MemRead $end
$var wire 1 ) d_i_MemWrite $end
$var wire 1 * d_i_MemtoReg $end
$var wire 1 + d_i_RegDst $end
$var wire 1 , d_i_RegWrite $end
$var wire 1 / d_i_ce $end
$var wire 32 3 d_o_pc [31:0] $end
$var wire 1 1 d_rst $end
$var wire 1 4 ds_o_ce $end
$var wire 32 5 ds_o_data_rs [31:0] $end
$var wire 32 6 ds_o_data_rt [31:0] $end
$var wire 6 7 ds_o_funct [5:0] $end
$var wire 16 8 ds_o_imm [15:0] $end
$var wire 6 9 ds_o_opcode [5:0] $end
$var wire 32 : es_o_alu_value [31:0] $end
$var wire 1 ; es_o_ce $end
$var wire 6 < es_o_funct [5:0] $end
$var wire 6 = es_o_opcode [5:0] $end
$var wire 1 > es_o_zero $end
$var wire 1 ? fs_o_ce $end
$var wire 32 @ fs_o_instr [31:0] $end
$var wire 1 A fs_o_valid $end
$var wire 32 B ms_o_load_data [31:0] $end
$var wire 32 C write_back_data [31:0] $end
$var reg 1 D ds_es_o_ce $end
$var reg 32 E ds_es_o_data_rs [31:0] $end
$var reg 32 F ds_es_o_data_rt [31:0] $end
$var reg 6 G ds_es_o_funct [5:0] $end
$var reg 16 H ds_es_o_imm [15:0] $end
$var reg 6 I ds_es_o_opcode [5:0] $end
$var reg 32 J es_ds_load_data [31:0] $end
$var reg 32 K es_ms_alu_value [31:0] $end
$var reg 1 L es_ms_o_ce $end
$var reg 6 M es_ms_o_funct [5:0] $end
$var reg 6 N es_ms_o_opcode [5:0] $end
$var reg 1 O es_ms_o_zero $end
$var reg 1 P fs_ds_o_ce $end
$var reg 32 Q fs_ds_o_instr [31:0] $end
$var reg 1 R fs_ds_o_valid $end
$scope module is $end
$var wire 1 . f_clk $end
$var wire 1 S f_i_ack $end
$var wire 1 / f_i_ce $end
$var wire 32 T f_i_instr [31:0] $end
$var wire 1 U f_i_last $end
$var wire 1 1 f_rst $end
$var reg 1 V f_o_ce $end
$var reg 32 W f_o_instr [31:0] $end
$var reg 32 X f_o_pc [31:0] $end
$var reg 1 Y f_o_syn $end
$var reg 1 Z f_o_valid $end
$scope module t $end
$var wire 1 . t_clk $end
$var wire 1 [ t_i_syn $end
$var wire 1 1 t_rst $end
$var integer 32 \ counter [31:0] $end
$var reg 1 ] t_o_ack $end
$var reg 32 ^ t_o_instr [31:0] $end
$var reg 1 _ t_o_last $end
$upscope $end
$upscope $end
$scope module ds $end
$var wire 5 ` d_o_addr_rs [4:0] $end
$var wire 5 a d_o_addr_rt [4:0] $end
$var wire 1 . ds_clk $end
$var wire 5 b ds_i_addr_rd [4:0] $end
$var wire 1 c ds_i_ce $end
$var wire 32 d ds_i_data_rd [31:0] $end
$var wire 32 e ds_i_instr [31:0] $end
$var wire 1 + ds_i_reg_dst $end
$var wire 1 , ds_i_reg_wr $end
$var wire 1 4 ds_o_ce $end
$var wire 32 f ds_o_data_rs [31:0] $end
$var wire 32 g ds_o_data_rt [31:0] $end
$var wire 6 h ds_o_funct [5:0] $end
$var wire 16 i ds_o_imm [15:0] $end
$var wire 6 j ds_o_opcode [5:0] $end
$var wire 1 1 ds_rst $end
$var wire 5 k write_register [4:0] $end
$scope module d $end
$var wire 1 . d_clk $end
$var wire 1 c d_i_ce $end
$var wire 6 l d_i_funct [5:0] $end
$var wire 32 m d_i_instr [31:0] $end
$var wire 6 n d_i_opcode [5:0] $end
$var wire 1 1 d_rst $end
$var wire 1 o funct_add $end
$var wire 1 p funct_and $end
$var wire 1 q funct_or $end
$var wire 1 r funct_sub $end
$var wire 1 s funct_xor $end
$var wire 1 t op_addi $end
$var wire 1 u op_addiu $end
$var wire 1 v op_andi $end
$var wire 1 w op_branch $end
$var wire 1 x op_load $end
$var wire 1 y op_ori $end
$var wire 1 z op_rtype $end
$var wire 1 { op_slti $end
$var wire 1 | op_sltiu $end
$var wire 1 } op_store $end
$var wire 1 ~ op_xori $end
$var reg 5 !" d_o_addr_rd [4:0] $end
$var reg 5 "" d_o_addr_rs [4:0] $end
$var reg 5 #" d_o_addr_rt [4:0] $end
$var reg 1 $" d_o_ce $end
$var reg 6 %" d_o_funct [5:0] $end
$var reg 16 &" d_o_imm [15:0] $end
$var reg 6 '" d_o_opcode [5:0] $end
$var reg 32 (" temp_instr [31:0] $end
$upscope $end
$scope module r $end
$var wire 5 )" r_addr_in [4:0] $end
$var wire 5 *" r_addr_out1 [4:0] $end
$var wire 5 +" r_addr_out2 [4:0] $end
$var wire 1 . r_clk $end
$var wire 32 ," r_data_in [31:0] $end
$var wire 32 -" r_data_out1 [31:0] $end
$var wire 32 ." r_data_out2 [31:0] $end
$var wire 1 1 r_rst $end
$var wire 1 , r_wr_en $end
$var integer 32 /" i [31:0] $end
$upscope $end
$upscope $end
$scope module es $end
$var wire 32 0" alu_value [31:0] $end
$var wire 1 1" done $end
$var wire 1 . es_clk $end
$var wire 6 2" es_i_alu_funct [5:0] $end
$var wire 6 3" es_i_alu_op [5:0] $end
$var wire 1 & es_i_alu_src $end
$var wire 1 4" es_i_ce $end
$var wire 32 5" es_i_data_rs [31:0] $end
$var wire 32 6" es_i_data_rt [31:0] $end
$var wire 16 7" es_i_imm [15:0] $end
$var wire 32 8" es_i_pc [31:0] $end
$var wire 32 9" es_imm [31:0] $end
$var wire 32 :" es_o_data_2 [31:0] $end
$var wire 1 1 es_rst $end
$var reg 4 ;" alu_control [3:0] $end
$var reg 32 <" es_o_alu_value [31:0] $end
$var reg 32 =" es_o_branch_pc [31:0] $end
$var reg 1 >" es_o_ce $end
$var reg 1 ?" es_o_change_pc $end
$var reg 6 @" es_o_funct [5:0] $end
$var reg 6 A" es_o_opcode [5:0] $end
$var reg 1 B" es_o_zero $end
$scope module a $end
$var wire 32 C" a_i_data_rs [31:0] $end
$var wire 32 D" a_i_data_rt [31:0] $end
$var wire 4 E" a_i_funct [3:0] $end
$var wire 1 F" funct_add $end
$var wire 1 G" funct_addu $end
$var wire 1 H" funct_and $end
$var wire 1 I" funct_eq $end
$var wire 1 J" funct_ge $end
$var wire 1 K" funct_geu $end
$var wire 1 L" funct_neq $end
$var wire 1 M" funct_or $end
$var wire 1 N" funct_sll $end
$var wire 1 O" funct_slt $end
$var wire 1 P" funct_sltu $end
$var wire 1 Q" funct_sra $end
$var wire 1 R" funct_srl $end
$var wire 1 S" funct_sub $end
$var wire 1 T" funct_xor $end
$var reg 32 U" alu_value [31:0] $end
$var reg 1 V" done $end
$upscope $end
$upscope $end
$scope module m $end
$var wire 32 W" alu_value_addr [31:0] $end
$var wire 1 . m_clk $end
$var wire 1 X" m_i_ce $end
$var wire 32 Y" m_i_store_data [31:0] $end
$var wire 1 ( m_rd_en $end
$var wire 1 1 m_rst $end
$var wire 1 ) m_wr_en $end
$var integer 32 Z" i [31:0] $end
$var reg 32 [" m_o_load_data [31:0] $end
$upscope $end
$upscope $end
$scope module c $end
$var wire 6 \" d_c_opcode [5:0] $end
$var reg 1 ]" ALUSrc $end
$var reg 1 ^" Branch $end
$var reg 1 _" MemRead $end
$var reg 1 `" MemWrite $end
$var reg 1 a" MemtoReg $end
$var reg 1 b" RegDst $end
$var reg 1 c" RegWrite $end
$upscope $end
$upscope $end
$scope task reset $end
$var integer 32 d" counter [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10 d"
1c"
1b"
0a"
0`"
0_"
0^"
0]"
b0 \"
b0 ["
b100000 Z"
b0 Y"
0X"
b0 W"
1V"
b0 U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
1F"
b0 E"
b0 D"
b0 C"
0B"
b0 A"
b0 @"
x?"
0>"
bx ="
b0 <"
b0 ;"
b0 :"
b0 9"
bz 8"
b0 7"
b0 6"
b0 5"
04"
b0 3"
b0 2"
11"
b0 0"
b100000 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
bx ("
b0 '"
b0 &"
b0 %"
0$"
b0 #"
b0 ""
b0 !"
x~
x}
x|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
bx n
b0 m
bx l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
0c
b0 b
b0 a
b0 `
0_
b0 ^
0]
b0 \
0[
0Z
0Y
b0 X
b0 W
0V
0U
b0 T
0S
0R
b0 Q
0P
0O
b0 N
b0 M
0L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
0D
b0 C
b0 B
0A
b0 @
0?
0>
b0 =
b0 <
0;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
04
b0 3
b0 2
01
b0 0
x/
0.
b0 -
1,
1+
0*
0)
0(
0'
0&
0%
x$
0#
b0 "
b0 !
$end
#5
b100000 Z"
b100000 /"
1#
1.
#10
0#
0.
#15
1%
11
1#
1.
#20
0#
0.
#25
1Y
1[
1$
1/
1#
1.
#30
0#
0.
#35
1]
1S
b1 \
b10000110000100000100000 ^
b10000110000100000100000 T
1#
1.
#40
0#
0.
#45
1Z
1A
1V
1?
b100 X
b100 !
b100 0
b100 3
b10000110000100000100000 W
b10000110000100000100000 @
b10 \
b101001100010000000100001 ^
b101001100010000000100001 T
1#
1.
#50
0#
0.
#55
b11 \
b1000010010011100000100010 ^
b1000010010011100000100010 T
b1000 X
b1000 !
b1000 0
b1000 3
b101001100010000000100001 W
b101001100010000000100001 @
1P
1c
b10000110000100000100000 Q
b10000110000100000100000 e
b10000110000100000100000 m
1R
1#
1.
#60
0#
0.
#65
1z
0x
0}
0w
0t
0u
0{
0|
0v
0y
0~
b0 n
1o
0r
0p
0q
0s
b100000 l
b101001100010000000100001 Q
b101001100010000000100001 e
b101001100010000000100001 m
b10000110000100000100000 ("
b1100 X
b1100 !
b1100 0
b1100 3
b1000010010011100000100010 W
b1000010010011100000100010 @
b100 \
b1000100101000000100011 ^
b1000100101000000100011 T
1#
1.
#70
0#
0.
#75
b1 k
b1 )"
0o
1r
b100001 l
b0 \
1_
1U
b10000010000010000000001100100 ^
b10000010000010000000001100100 T
b10000 X
b10000 !
b10000 0
b10000 3
b1000100101000000100011 W
b1000100101000000100011 @
1$"
14
b100000 %"
b100000 7
b100000 h
b1 !"
b1 b
b11 #"
b11 6
b11 g
b11 ."
b11 a
b11 +"
b10 ""
b10 5
b10 f
b10 -"
b10 `
b10 *"
b101001100010000000100001 ("
b1000010010011100000100010 Q
b1000010010011100000100010 e
b1000010010011100000100010 m
1#
1.
#80
0#
0.
#85
b11 :"
b11 D"
b101 U"
b101 0"
1V"
11"
b100 k
b100 )"
0r
1p
b100010 l
1D
14"
b11 F
b11 6"
b11 Y"
b10 E
b10 5"
b10 C"
b100000 G
b100000 2"
b1000100101000000100011 Q
b1000100101000000100011 e
b1000100101000000100011 m
b100001 %"
b100001 7
b100001 h
b100 !"
b100 b
b110 #"
b110 6
b110 g
b110 ."
b110 a
b110 +"
b101 ""
b101 5
b101 f
b101 -"
b101 `
b101 *"
b1000010010011100000100010 ("
0Y
0[
b10100 X
b10100 !
b10100 0
b10100 3
b10000010000010000000001100100 W
b10000010000010000000001100100 @
0]
0S
b1 \
0_
0U
b10000110000100000100000 ^
b10000110000100000100000 T
1#
1.
#90
0#
0.
#95
b111 k
b111 )"
0p
1q
b100011 l
b110 :"
b110 D"
1V"
11"
b11111111111111111111111111111111 U"
b11111111111111111111111111111111 0"
b1 ;"
b1 E"
0F"
1S"
1Y
1[
b100010 %"
b100010 7
b100010 h
b111 !"
b111 b
b1001 #"
b1001 6
b1001 g
b1001 ."
b1001 a
b1001 +"
b1000 ""
b1000 5
b1000 f
b1000 -"
b1000 `
b1000 *"
b1000100101000000100011 ("
0>"
0;
b100000 @"
b100000 <
b101 <"
b101 :
b10000010000010000000001100100 Q
b10000010000010000000001100100 e
b10000010000010000000001100100 m
b110 F
b110 6"
b110 Y"
b101 E
b101 5"
b101 C"
b100001 G
b100001 2"
1#
1.
#100
0#
0.
#105
b101 "
b101 2
b101 C
b101 d
b101 ,"
b1001 :"
b1001 D"
1V"
11"
b1000 U"
b1000 0"
1H"
b10 ;"
b10 E"
0F"
0S"
b1010 k
b1010 )"
0z
1t
b100 n
0q
1s
b100100 l
b100000 M
b101 K
b101 W"
b1001 F
b1001 6"
b1001 Y"
b1000 E
b1000 5"
b1000 C"
b100010 G
b100010 2"
0>"
0;
b100001 @"
b100001 <
b11111111111111111111111111111111 <"
b11111111111111111111111111111111 :
b100011 %"
b100011 7
b100011 h
b1010 !"
b1010 b
b10 #"
b10 6
b10 g
b10 ."
b10 a
b10 +"
b1 ""
b0 5
b0 f
b0 -"
b1 `
b1 *"
b10000010000010000000001100100 ("
1]
1S
b10 \
b101001100010000000100001 ^
b101001100010000000100001 T
1#
1.
#110
0#
0.
#115
b0 k
b0 )"
b10 :"
b10 D"
1V"
11"
b10 U"
b10 0"
1M"
b11 ;"
b11 E"
0F"
0H"
b11111111111111111111111111111111 "
b11111111111111111111111111111111 2
b11111111111111111111111111111111 C
b11111111111111111111111111111111 d
b11111111111111111111111111111111 ,"
b11 \
b1000010010011100000100010 ^
b1000010010011100000100010 T
b11000 X
b11000 !
b11000 0
b11000 3
b101001100010000000100001 W
b101001100010000000100001 @
b1100100 &"
b1100100 8
b1100100 i
b0 %"
b0 7
b0 h
b100 '"
b100 9
b100 j
b0 !"
b0 b
b1 #"
b0 6
b0 g
b0 ."
b1 a
b1 +"
b10 ""
b10 5
b10 f
b10 -"
b10 `
b10 *"
0>"
0;
b100010 @"
b100010 <
b1000 <"
b1000 :
b10 F
b10 6"
b10 Y"
b0 E
b0 5"
b0 C"
b100011 G
b100011 2"
b100001 M
b11111111111111111111111111111111 K
b11111111111111111111111111111111 W"
1#
1.
#120
0#
0.
#125
b1 k
b1 )"
b1000 "
b1000 2
b1000 C
b1000 d
b1000 ,"
b1100100 :"
b1100100 D"
1V"
11"
b1100110 U"
b1100110 0"
1]"
1&
1c"
1,
0b"
0+
b0 ;"
b0 E"
1F"
0M"
b100010 M
b1000 K
b1000 W"
b1100100 H
b1100100 7"
b1100100 9"
b0 F
b0 6"
b0 Y"
b10 E
b10 5"
b10 C"
b0 G
b0 2"
b100 I
b100 -
b100 3"
b100 \"
b101001100010000000100001 Q
b101001100010000000100001 e
b101001100010000000100001 m
0>"
0;
b100011 @"
b100011 <
b10 <"
b10 :
b11100 X
b11100 !
b11100 0
b11100 3
b1000010010011100000100010 W
b1000010010011100000100010 @
b100 \
b1000100101000000100011 ^
b1000100101000000100011 T
1#
1.
#130
0#
0.
#135
1z
0t
b0 n
1r
0s
b100001 l
b10 "
b10 2
b10 C
b10 d
b10 ,"
b0 \
1_
1U
b10000010000010000000001100100 ^
b10000010000010000000001100100 T
b100000 X
b100000 !
b100000 0
b100000 3
b1000100101000000100011 W
b1000100101000000100011 @
b101001100010000000100001 ("
b1000 6
b1000 g
b1000 ."
0>"
0;
b0 @"
b0 <
b100 A"
b100 =
b1100110 <"
b1100110 :
b1000010010011100000100010 Q
b1000010010011100000100010 e
b1000010010011100000100010 m
b100011 M
b10 K
b10 W"
1#
1.
#140
0#
0.
#145
b1100110 "
b1100110 2
b1100110 C
b1100110 d
b1100110 ,"
b110 k
b110 )"
0r
1p
b100010 l
b0 M
b100 N
b1100110 K
b1100110 W"
b1000 F
b1000 6"
b1000 Y"
b1000100101000000100011 Q
b1000100101000000100011 e
b1000100101000000100011 m
0>"
0;
b0 &"
b0 8
b0 i
b100001 %"
b100001 7
b100001 h
b0 '"
b0 9
b0 j
b100 !"
b100 b
b110 #"
b110 6
b110 g
b110 ."
b110 a
b110 +"
b101 ""
b101 5
b101 f
b101 -"
b101 `
b101 *"
b1000010010011100000100010 ("
0Y
0[
b100100 X
b100100 !
b100100 0
b100100 3
b10000010000010000000001100100 W
b10000010000010000000001100100 @
0]
0S
b1 \
0_
0U
b10000110000100000100000 ^
b10000110000100000100000 T
1#
1.
#150
0#
0.
#155
b111 k
b111 )"
0p
1q
b100011 l
b110 :"
b110 D"
1V"
11"
b11111111111111111111111111111111 U"
b11111111111111111111111111111111 0"
1b"
1+
1c"
1,
0]"
0&
b1 ;"
b1 E"
0F"
1S"
1Y
1[
b100010 %"
b100010 7
b100010 h
b111 !"
b111 b
b1001 #"
b1001 a
b1001 +"
b1000 ""
b1000 5
b1000 f
b1000 -"
b1000 `
b1000 *"
b1000100101000000100011 ("
b1001 6
b1001 g
b1001 ."
0>"
0;
b10000010000010000000001100100 Q
b10000010000010000000001100100 e
b10000010000010000000001100100 m
b0 H
b0 7"
b0 9"
b110 F
b110 6"
b110 Y"
b101 E
b101 5"
b101 C"
b100001 G
b100001 2"
b0 I
b0 -
b0 3"
b0 \"
1#
1.
